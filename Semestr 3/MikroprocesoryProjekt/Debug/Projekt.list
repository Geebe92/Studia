
Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800376c  0800376c  0001376c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800381c  0800381c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800381c  0800381c  0001381c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003824  08003824  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003824  08003824  00013824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003828  08003828  00013828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800382c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d64  20000070  0800389c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dd4  0800389c  00020dd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a926  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b6e  00000000  00000000  0002a9c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0002c538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  0002cc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d49  00000000  00000000  0002d350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009bc7  00000000  00000000  00043099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085f1d  00000000  00000000  0004cc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2b7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020cc  00000000  00000000  000d2bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003754 	.word	0x08003754

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003754 	.word	0x08003754

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <MX_GPIO_Init+0x98>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a1e      	ldr	r2, [pc, #120]	; (8000640 <MX_GPIO_Init+0x98>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <MX_GPIO_Init+0x98>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_GPIO_Init+0x98>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a17      	ldr	r2, [pc, #92]	; (8000640 <MX_GPIO_Init+0x98>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <MX_GPIO_Init+0x98>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2120      	movs	r1, #32
 80005fa:	4812      	ldr	r0, [pc, #72]	; (8000644 <MX_GPIO_Init+0x9c>)
 80005fc:	f001 f8b6 	bl	800176c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000600:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000604:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	4619      	mov	r1, r3
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <MX_GPIO_Init+0xa0>)
 8000616:	f000 ff25 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800061a:	2320      	movs	r3, #32
 800061c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	4619      	mov	r1, r3
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <MX_GPIO_Init+0x9c>)
 8000632:	f000 ff17 	bl	8001464 <HAL_GPIO_Init>

}
 8000636:	bf00      	nop
 8000638:	3720      	adds	r7, #32
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40020000 	.word	0x40020000
 8000648:	40020800 	.word	0x40020800

0800064c <UART_Begin>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UART_Begin(){
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
	Tx.busy = 0;
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <UART_Begin+0x28>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]
	Tx.empty = 0;
 8000656:	4b07      	ldr	r3, [pc, #28]	; (8000674 <UART_Begin+0x28>)
 8000658:	2200      	movs	r2, #0
 800065a:	705a      	strb	r2, [r3, #1]

	Rx.busy = 0;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <UART_Begin+0x2c>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
	Rx.empty = 0;
 8000662:	4b05      	ldr	r3, [pc, #20]	; (8000678 <UART_Begin+0x2c>)
 8000664:	2200      	movs	r2, #0
 8000666:	705a      	strb	r2, [r3, #1]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000974 	.word	0x20000974
 8000678:	200000a8 	.word	0x200000a8

0800067c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a0d      	ldr	r2, [pc, #52]	; (80006c0 <HAL_UART_RxCpltCallback+0x44>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d114      	bne.n	80006b8 <HAL_UART_RxCpltCallback+0x3c>
		Rx.empty++;
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <HAL_UART_RxCpltCallback+0x48>)
 8000690:	785b      	ldrb	r3, [r3, #1]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	3301      	adds	r3, #1
 8000696:	b2da      	uxtb	r2, r3
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <HAL_UART_RxCpltCallback+0x48>)
 800069a:	705a      	strb	r2, [r3, #1]
		if (Rx.empty >= sizeOfBuffor) {
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <HAL_UART_RxCpltCallback+0x48>)
 800069e:	785b      	ldrb	r3, [r3, #1]
			Rx.empty = 0;
		}
		HAL_UART_Receive_IT(&huart2, &Rx.array[Rx.empty], 1);
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <HAL_UART_RxCpltCallback+0x48>)
 80006a2:	785b      	ldrb	r3, [r3, #1]
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	461a      	mov	r2, r3
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_UART_RxCpltCallback+0x48>)
 80006aa:	4413      	add	r3, r2
 80006ac:	3302      	adds	r3, #2
 80006ae:	2201      	movs	r2, #1
 80006b0:	4619      	mov	r1, r3
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <HAL_UART_RxCpltCallback+0x4c>)
 80006b4:	f001 fd4e 	bl	8002154 <HAL_UART_Receive_IT>
	}
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40004400 	.word	0x40004400
 80006c4:	200000a8 	.word	0x200000a8
 80006c8:	20000d7c 	.word	0x20000d7c

080006cc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	if(Tx.busy != Tx.empty){
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <HAL_UART_TxCpltCallback+0x50>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <HAL_UART_TxCpltCallback+0x50>)
 80006dc:	785b      	ldrb	r3, [r3, #1]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d017      	beq.n	8000714 <HAL_UART_TxCpltCallback+0x48>
		uint8_t tempChar = Tx.array[Tx.busy];
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <HAL_UART_TxCpltCallback+0x50>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	461a      	mov	r2, r3
 80006ec:	4b0b      	ldr	r3, [pc, #44]	; (800071c <HAL_UART_TxCpltCallback+0x50>)
 80006ee:	4413      	add	r3, r2
 80006f0:	789b      	ldrb	r3, [r3, #2]
 80006f2:	73fb      	strb	r3, [r7, #15]
		Tx.busy++;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <HAL_UART_TxCpltCallback+0x50>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	3301      	adds	r3, #1
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b07      	ldr	r3, [pc, #28]	; (800071c <HAL_UART_TxCpltCallback+0x50>)
 8000700:	701a      	strb	r2, [r3, #0]

		if(Tx.busy >= sizeOfBuffor){
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_UART_TxCpltCallback+0x50>)
 8000704:	781b      	ldrb	r3, [r3, #0]
			Tx.busy = 0;
		}
		HAL_UART_Transmit_IT(&huart2, &tempChar, 1);
 8000706:	f107 030f 	add.w	r3, r7, #15
 800070a:	2201      	movs	r2, #1
 800070c:	4619      	mov	r1, r3
 800070e:	4804      	ldr	r0, [pc, #16]	; (8000720 <HAL_UART_TxCpltCallback+0x54>)
 8000710:	f001 fcdb 	bl	80020ca <HAL_UART_Transmit_IT>
	}
}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000974 	.word	0x20000974
 8000720:	20000d7c 	.word	0x20000d7c

08000724 <USART_Send>:

void USART_Send(char* message, ...){
 8000724:	b40f      	push	{r0, r1, r2, r3}
 8000726:	b580      	push	{r7, lr}
 8000728:	b09e      	sub	sp, #120	; 0x78
 800072a:	af00      	add	r7, sp, #0
	char tempMsg[100];
	int i;
	volatile int send_idx = Tx.empty;
 800072c:	4b35      	ldr	r3, [pc, #212]	; (8000804 <USART_Send+0xe0>)
 800072e:	785b      	ldrb	r3, [r3, #1]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	60fb      	str	r3, [r7, #12]

	va_list arglist;
	va_start(arglist, message);
 8000734:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000738:	60bb      	str	r3, [r7, #8]
	vsprintf(tempMsg, message, arglist);
 800073a:	f107 0310 	add.w	r3, r7, #16
 800073e:	68ba      	ldr	r2, [r7, #8]
 8000740:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8000744:	4618      	mov	r0, r3
 8000746:	f002 fbfb 	bl	8002f40 <vsiprintf>
	va_end(arglist);

	for (i = 0; i < strlen(tempMsg); i++) {
 800074a:	2300      	movs	r3, #0
 800074c:	677b      	str	r3, [r7, #116]	; 0x74
 800074e:	e015      	b.n	800077c <USART_Send+0x58>
		Tx.array[send_idx] = tempMsg[i];
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f107 0110 	add.w	r1, r7, #16
 8000756:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000758:	440a      	add	r2, r1
 800075a:	7811      	ldrb	r1, [r2, #0]
 800075c:	4a29      	ldr	r2, [pc, #164]	; (8000804 <USART_Send+0xe0>)
 800075e:	4413      	add	r3, r2
 8000760:	460a      	mov	r2, r1
 8000762:	709a      	strb	r2, [r3, #2]
		send_idx++;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3301      	adds	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
		if (send_idx >= sizeOfBuffor) {
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000770:	db01      	blt.n	8000776 <USART_Send+0x52>
			send_idx = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < strlen(tempMsg); i++) {
 8000776:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000778:	3301      	adds	r3, #1
 800077a:	677b      	str	r3, [r7, #116]	; 0x74
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff fd37 	bl	80001f4 <strlen>
 8000786:	4602      	mov	r2, r0
 8000788:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800078a:	429a      	cmp	r2, r3
 800078c:	d8e0      	bhi.n	8000750 <USART_Send+0x2c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078e:	b672      	cpsid	i
}
 8000790:	bf00      	nop
		}
	}

	__disable_irq();
	if ((Tx.empty == Tx.busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE)==SET)) {
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <USART_Send+0xe0>)
 8000794:	785b      	ldrb	r3, [r3, #1]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <USART_Send+0xe0>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	429a      	cmp	r2, r3
 80007a0:	d122      	bne.n	80007e8 <USART_Send+0xc4>
 80007a2:	4b19      	ldr	r3, [pc, #100]	; (8000808 <USART_Send+0xe4>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ac:	2b80      	cmp	r3, #128	; 0x80
 80007ae:	d11b      	bne.n	80007e8 <USART_Send+0xc4>
		Tx.empty = send_idx;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	b2da      	uxtb	r2, r3
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <USART_Send+0xe0>)
 80007b6:	705a      	strb	r2, [r3, #1]
		uint8_t tmp = Tx.array[Tx.busy];
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <USART_Send+0xe0>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	461a      	mov	r2, r3
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <USART_Send+0xe0>)
 80007c2:	4413      	add	r3, r2
 80007c4:	789b      	ldrb	r3, [r3, #2]
 80007c6:	71fb      	strb	r3, [r7, #7]
		Tx.busy++;
 80007c8:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <USART_Send+0xe0>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	3301      	adds	r3, #1
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <USART_Send+0xe0>)
 80007d4:	701a      	strb	r2, [r3, #0]
		if (Tx.busy >= sizeOfBuffor)
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <USART_Send+0xe0>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
			Tx.busy = 0;

		HAL_UART_Transmit_IT(&huart2, &tmp, 1);
 80007da:	1dfb      	adds	r3, r7, #7
 80007dc:	2201      	movs	r2, #1
 80007de:	4619      	mov	r1, r3
 80007e0:	4809      	ldr	r0, [pc, #36]	; (8000808 <USART_Send+0xe4>)
 80007e2:	f001 fc72 	bl	80020ca <HAL_UART_Transmit_IT>
	if ((Tx.empty == Tx.busy) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE)==SET)) {
 80007e6:	e003      	b.n	80007f0 <USART_Send+0xcc>
		}else{
			Tx.empty = send_idx;
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <USART_Send+0xe0>)
 80007ee:	705a      	strb	r2, [r3, #1]
  __ASM volatile ("cpsie i" : : : "memory");
 80007f0:	b662      	cpsie	i
}
 80007f2:	bf00      	nop
		}
	__enable_irq();

}
 80007f4:	bf00      	nop
 80007f6:	3778      	adds	r7, #120	; 0x78
 80007f8:	46bd      	mov	sp, r7
 80007fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007fe:	b004      	add	sp, #16
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000974 	.word	0x20000974
 8000808:	20000d7c 	.word	0x20000d7c

0800080c <ramkaWysylanie>:
	else
		return 0;
}

// Funckcje od ramki
void ramkaWysylanie(char x[]){
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	//char* koniec = ";";
	//strcat(x,tekst);
	//strcat(x,koniec);


    char tmp = x[0];
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	73fb      	strb	r3, [r7, #15]
    int i=0;
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
    while (!tmp == '\0')
 800081e:	e01b      	b.n	8000858 <ramkaWysylanie+0x4c>
    {
        Rx.array[Rx.empty] = x[i];
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	4a11      	ldr	r2, [pc, #68]	; (800086c <ramkaWysylanie+0x60>)
 8000828:	7852      	ldrb	r2, [r2, #1]
 800082a:	b2d2      	uxtb	r2, r2
 800082c:	4611      	mov	r1, r2
 800082e:	781a      	ldrb	r2, [r3, #0]
 8000830:	4b0e      	ldr	r3, [pc, #56]	; (800086c <ramkaWysylanie+0x60>)
 8000832:	440b      	add	r3, r1
 8000834:	709a      	strb	r2, [r3, #2]
        i++;
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	3301      	adds	r3, #1
 800083a:	60bb      	str	r3, [r7, #8]
        tmp = x[i];
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	73fb      	strb	r3, [r7, #15]
        Rx.empty++;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <ramkaWysylanie+0x60>)
 8000848:	785b      	ldrb	r3, [r3, #1]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	3301      	adds	r3, #1
 800084e:	b2da      	uxtb	r2, r3
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <ramkaWysylanie+0x60>)
 8000852:	705a      	strb	r2, [r3, #1]
        if (Rx.empty >= sizeOfBuffor) {
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <ramkaWysylanie+0x60>)
 8000856:	785b      	ldrb	r3, [r3, #1]
    while (!tmp == '\0')
 8000858:	7bfb      	ldrb	r3, [r7, #15]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d1e0      	bne.n	8000820 <ramkaWysylanie+0x14>
        		Rx.empty = 0;
        }
    }

}
 800085e:	bf00      	nop
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	200000a8 	.word	0x200000a8

08000870 <ramkaTest>:
void ramkaTest(char dane[]){
 8000870:	b580      	push	{r7, lr}
 8000872:	b09c      	sub	sp, #112	; 0x70
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	char msg[100];
	sprintf(msg, ":OUT%s;", dane);
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	490a      	ldr	r1, [pc, #40]	; (80008a8 <ramkaTest+0x38>)
 8000880:	4618      	mov	r0, r3
 8000882:	f002 fb17 	bl	8002eb4 <siprintf>
	USART_Send("[Sprawdzenie] ");
 8000886:	4809      	ldr	r0, [pc, #36]	; (80008ac <ramkaTest+0x3c>)
 8000888:	f7ff ff4c 	bl	8000724 <USART_Send>
	USART_Send(msg);
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff ff47 	bl	8000724 <USART_Send>
	//USART_Send("\r\n");
	ramkaWysylanie(msg);
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff ffb6 	bl	800080c <ramkaWysylanie>
}
 80008a0:	bf00      	nop
 80008a2:	3770      	adds	r7, #112	; 0x70
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	0800376c 	.word	0x0800376c
 80008ac:	08003774 	.word	0x08003774

080008b0 <HexUID>:
void HexUID(uint32_t x){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	char ascii[10]={0};
 80008b8:	2300      	movs	r3, #0
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	809a      	strh	r2, [r3, #4]
	int temp,count=0,i,cnd=0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]

    if(x>>31)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	da1b      	bge.n	800090c <HexUID+0x5c>
    {
    /*CONVERTING 2's complement value to normal value*/
    x=~x+1;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	425b      	negs	r3, r3
 80008d8:	607b      	str	r3, [r7, #4]
    for(temp=x;temp!=0;temp/=10,count++);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
 80008de:	e00a      	b.n	80008f6 <HexUID+0x46>
 80008e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e2:	4a2d      	ldr	r2, [pc, #180]	; (8000998 <HexUID+0xe8>)
 80008e4:	fb82 1203 	smull	r1, r2, r2, r3
 80008e8:	1092      	asrs	r2, r2, #2
 80008ea:	17db      	asrs	r3, r3, #31
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
 80008f0:	6a3b      	ldr	r3, [r7, #32]
 80008f2:	3301      	adds	r3, #1
 80008f4:	623b      	str	r3, [r7, #32]
 80008f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d1f1      	bne.n	80008e0 <HexUID+0x30>
    ascii[0]=0x2D;
 80008fc:	232d      	movs	r3, #45	; 0x2d
 80008fe:	733b      	strb	r3, [r7, #12]
    count++;
 8000900:	6a3b      	ldr	r3, [r7, #32]
 8000902:	3301      	adds	r3, #1
 8000904:	623b      	str	r3, [r7, #32]
    cnd=1;
 8000906:	2301      	movs	r3, #1
 8000908:	61bb      	str	r3, [r7, #24]
 800090a:	e010      	b.n	800092e <HexUID+0x7e>
    }
    else
    for(temp=x;temp!=0;temp/=10,count++);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
 8000910:	e00a      	b.n	8000928 <HexUID+0x78>
 8000912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000914:	4a20      	ldr	r2, [pc, #128]	; (8000998 <HexUID+0xe8>)
 8000916:	fb82 1203 	smull	r1, r2, r2, r3
 800091a:	1092      	asrs	r2, r2, #2
 800091c:	17db      	asrs	r3, r3, #31
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
 8000922:	6a3b      	ldr	r3, [r7, #32]
 8000924:	3301      	adds	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
 8000928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092a:	2b00      	cmp	r3, #0
 800092c:	d1f1      	bne.n	8000912 <HexUID+0x62>
    for(i=count-1,temp=x;i>=cnd;i--)
 800092e:	6a3b      	ldr	r3, [r7, #32]
 8000930:	3b01      	subs	r3, #1
 8000932:	61fb      	str	r3, [r7, #28]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
 8000938:	e01f      	b.n	800097a <HexUID+0xca>
    {

       ascii[i]=(temp%10)+0x30;
 800093a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800093c:	4b16      	ldr	r3, [pc, #88]	; (8000998 <HexUID+0xe8>)
 800093e:	fb83 1302 	smull	r1, r3, r3, r2
 8000942:	1099      	asrs	r1, r3, #2
 8000944:	17d3      	asrs	r3, r2, #31
 8000946:	1ac9      	subs	r1, r1, r3
 8000948:	460b      	mov	r3, r1
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	440b      	add	r3, r1
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	1ad1      	subs	r1, r2, r3
 8000952:	b2cb      	uxtb	r3, r1
 8000954:	3330      	adds	r3, #48	; 0x30
 8000956:	b2d9      	uxtb	r1, r3
 8000958:	f107 020c 	add.w	r2, r7, #12
 800095c:	69fb      	ldr	r3, [r7, #28]
 800095e:	4413      	add	r3, r2
 8000960:	460a      	mov	r2, r1
 8000962:	701a      	strb	r2, [r3, #0]
       temp/=10;
 8000964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000966:	4a0c      	ldr	r2, [pc, #48]	; (8000998 <HexUID+0xe8>)
 8000968:	fb82 1203 	smull	r1, r2, r2, r3
 800096c:	1092      	asrs	r2, r2, #2
 800096e:	17db      	asrs	r3, r3, #31
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
    for(i=count-1,temp=x;i>=cnd;i--)
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	3b01      	subs	r3, #1
 8000978:	61fb      	str	r3, [r7, #28]
 800097a:	69fa      	ldr	r2, [r7, #28]
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	429a      	cmp	r2, r3
 8000980:	dadb      	bge.n	800093a <HexUID+0x8a>
    }

    strcat(wynikUID, ascii);
 8000982:	f107 030c 	add.w	r3, r7, #12
 8000986:	4619      	mov	r1, r3
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <HexUID+0xec>)
 800098a:	f002 fab3 	bl	8002ef4 <strcat>

}
 800098e:	bf00      	nop
 8000990:	3728      	adds	r7, #40	; 0x28
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	66666667 	.word	0x66666667
 800099c:	200008ac 	.word	0x200008ac

080009a0 <UID>:
// Komendy
void UID(){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
	uint32_t uid1 = *(uint32_t*) (0x1FFF7A10); //Adres odczytu, 96 bitów
 80009a6:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <UID+0x44>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	60fb      	str	r3, [r7, #12]
	uint32_t uid2 = *(uint32_t*) (0x1FFF7A10 + 0x04);
 80009ac:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <UID+0x48>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	60bb      	str	r3, [r7, #8]
	uint32_t uid3 = *(uint32_t*) (0x1FFF7A10 + 0x08);
 80009b2:	4b0e      	ldr	r3, [pc, #56]	; (80009ec <UID+0x4c>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	607b      	str	r3, [r7, #4]


	//sprintf(wynik, "%s%s%s", HexUID(uid1),HexUID(uid2),HexUID(uid3));
	HexUID(uid1);
 80009b8:	68f8      	ldr	r0, [r7, #12]
 80009ba:	f7ff ff79 	bl	80008b0 <HexUID>
	HexUID(uid2);
 80009be:	68b8      	ldr	r0, [r7, #8]
 80009c0:	f7ff ff76 	bl	80008b0 <HexUID>
	HexUID(uid3);
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff ff73 	bl	80008b0 <HexUID>

	ramkaTest(wynikUID);
 80009ca:	4809      	ldr	r0, [pc, #36]	; (80009f0 <UID+0x50>)
 80009cc:	f7ff ff50 	bl	8000870 <ramkaTest>
	memset(wynikUID, 0, 100);
 80009d0:	2264      	movs	r2, #100	; 0x64
 80009d2:	2100      	movs	r1, #0
 80009d4:	4806      	ldr	r0, [pc, #24]	; (80009f0 <UID+0x50>)
 80009d6:	f002 fa65 	bl	8002ea4 <memset>

}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	1fff7a10 	.word	0x1fff7a10
 80009e8:	1fff7a14 	.word	0x1fff7a14
 80009ec:	1fff7a18 	.word	0x1fff7a18
 80009f0:	200008ac 	.word	0x200008ac

080009f4 <flashSize>:
void flashSize(){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b0a0      	sub	sp, #128	; 0x80
 80009f8:	af00      	add	r7, sp, #0
	char ascii[10]={0};
 80009fa:	2300      	movs	r3, #0
 80009fc:	667b      	str	r3, [r7, #100]	; 0x64
 80009fe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	809a      	strh	r2, [r3, #4]
	int temp,count=0,i,cnd=0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	673b      	str	r3, [r7, #112]	; 0x70
	uint16_t flash;
	flash = *(uint16_t*) (0x1FFF7A22);
 8000a10:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <flashSize+0xbc>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    ascii[0]=0x2D;
    count++;
    cnd=1;
    }
    else
    for(temp=flash;temp!=0;temp/=10,count++);
 8000a18:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000a1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000a1e:	e00a      	b.n	8000a36 <flashSize+0x42>
 8000a20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a22:	4a24      	ldr	r2, [pc, #144]	; (8000ab4 <flashSize+0xc0>)
 8000a24:	fb82 1203 	smull	r1, r2, r2, r3
 8000a28:	1092      	asrs	r2, r2, #2
 8000a2a:	17db      	asrs	r3, r3, #31
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a32:	3301      	adds	r3, #1
 8000a34:	67bb      	str	r3, [r7, #120]	; 0x78
 8000a36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1f1      	bne.n	8000a20 <flashSize+0x2c>
    for(i=count-1,temp=flash;i>=cnd;i--)
 8000a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	677b      	str	r3, [r7, #116]	; 0x74
 8000a42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000a46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000a48:	e01f      	b.n	8000a8a <flashSize+0x96>
    {

       ascii[i]=(temp%10)+0x30;
 8000a4a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <flashSize+0xc0>)
 8000a4e:	fb83 1302 	smull	r1, r3, r3, r2
 8000a52:	1099      	asrs	r1, r3, #2
 8000a54:	17d3      	asrs	r3, r2, #31
 8000a56:	1ac9      	subs	r1, r1, r3
 8000a58:	460b      	mov	r3, r1
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	1ad1      	subs	r1, r2, r3
 8000a62:	b2cb      	uxtb	r3, r1
 8000a64:	3330      	adds	r3, #48	; 0x30
 8000a66:	b2d9      	uxtb	r1, r3
 8000a68:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000a6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a6e:	4413      	add	r3, r2
 8000a70:	460a      	mov	r2, r1
 8000a72:	701a      	strb	r2, [r3, #0]
       temp/=10;
 8000a74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000a76:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <flashSize+0xc0>)
 8000a78:	fb82 1203 	smull	r1, r2, r2, r3
 8000a7c:	1092      	asrs	r2, r2, #2
 8000a7e:	17db      	asrs	r3, r3, #31
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(i=count-1,temp=flash;i>=cnd;i--)
 8000a84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000a86:	3b01      	subs	r3, #1
 8000a88:	677b      	str	r3, [r7, #116]	; 0x74
 8000a8a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000a8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	dadb      	bge.n	8000a4a <flashSize+0x56>
    }

    char wynik[100];
    sprintf(wynik, "%s%s", ascii, "kB");
 8000a92:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000a96:	4638      	mov	r0, r7
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <flashSize+0xc4>)
 8000a9a:	4908      	ldr	r1, [pc, #32]	; (8000abc <flashSize+0xc8>)
 8000a9c:	f002 fa0a 	bl	8002eb4 <siprintf>
    ramkaTest(wynik);
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fee4 	bl	8000870 <ramkaTest>
}
 8000aa8:	bf00      	nop
 8000aaa:	3780      	adds	r7, #128	; 0x80
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	1fff7a22 	.word	0x1fff7a22
 8000ab4:	66666667 	.word	0x66666667
 8000ab8:	08003784 	.word	0x08003784
 8000abc:	08003788 	.word	0x08003788

08000ac0 <OTT>:
void OTT(){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	USART_Send(rDane);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <OTT+0x10>)
 8000ac6:	f7ff fe2d 	bl	8000724 <USART_Send>
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000910 	.word	0x20000910

08000ad4 <RTT>:
void RTT(){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	//ramkaWysylanie("Test dzialanie");
	ramkaTest("Test");
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <RTT+0x10>)
 8000ada:	f7ff fec9 	bl	8000870 <ramkaTest>

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	08003790 	.word	0x08003790

08000ae8 <cmdInfo>:
void cmdInfo(){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	USART_Send("[Komenda] ");
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <cmdInfo+0x1c>)
 8000aee:	f7ff fe19 	bl	8000724 <USART_Send>
	USART_Send(cmd);
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <cmdInfo+0x20>)
 8000af4:	f7ff fe16 	bl	8000724 <USART_Send>
	USART_Send("\r\n");
 8000af8:	4804      	ldr	r0, [pc, #16]	; (8000b0c <cmdInfo+0x24>)
 8000afa:	f7ff fe13 	bl	8000724 <USART_Send>
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	08003798 	.word	0x08003798
 8000b08:	20000d78 	.word	0x20000d78
 8000b0c:	080037a4 	.word	0x080037a4

08000b10 <command>:
void command(){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0

	if(strcmp("RTT", cmd) == 0){ //strcmp sprawdza czy pasuje to do komendy
 8000b14:	491c      	ldr	r1, [pc, #112]	; (8000b88 <command+0x78>)
 8000b16:	481d      	ldr	r0, [pc, #116]	; (8000b8c <command+0x7c>)
 8000b18:	f7ff fb62 	bl	80001e0 <strcmp>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d104      	bne.n	8000b2c <command+0x1c>
		cmdInfo();
 8000b22:	f7ff ffe1 	bl	8000ae8 <cmdInfo>
		RTT();
 8000b26:	f7ff ffd5 	bl	8000ad4 <RTT>
		USART_Send(cmd);
		USART_Send(" Nie ma takiej komendy");
		USART_Send("\r\n");
	}

}
 8000b2a:	e02a      	b.n	8000b82 <command+0x72>
	}else if (strcmp("RFL", cmd) == 0){
 8000b2c:	4916      	ldr	r1, [pc, #88]	; (8000b88 <command+0x78>)
 8000b2e:	4818      	ldr	r0, [pc, #96]	; (8000b90 <command+0x80>)
 8000b30:	f7ff fb56 	bl	80001e0 <strcmp>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d104      	bne.n	8000b44 <command+0x34>
		cmdInfo();
 8000b3a:	f7ff ffd5 	bl	8000ae8 <cmdInfo>
		flashSize();
 8000b3e:	f7ff ff59 	bl	80009f4 <flashSize>
}
 8000b42:	e01e      	b.n	8000b82 <command+0x72>
	}else if (strcmp("RID", cmd) == 0){ // xDDDQW
 8000b44:	4910      	ldr	r1, [pc, #64]	; (8000b88 <command+0x78>)
 8000b46:	4813      	ldr	r0, [pc, #76]	; (8000b94 <command+0x84>)
 8000b48:	f7ff fb4a 	bl	80001e0 <strcmp>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d104      	bne.n	8000b5c <command+0x4c>
		cmdInfo();
 8000b52:	f7ff ffc9 	bl	8000ae8 <cmdInfo>
		UID();
 8000b56:	f7ff ff23 	bl	80009a0 <UID>
}
 8000b5a:	e012      	b.n	8000b82 <command+0x72>
	}else if (strcmp("OUT", cmd) == 0){
 8000b5c:	490a      	ldr	r1, [pc, #40]	; (8000b88 <command+0x78>)
 8000b5e:	480e      	ldr	r0, [pc, #56]	; (8000b98 <command+0x88>)
 8000b60:	f7ff fb3e 	bl	80001e0 <strcmp>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d102      	bne.n	8000b70 <command+0x60>
		OTT();
 8000b6a:	f7ff ffa9 	bl	8000ac0 <OTT>
}
 8000b6e:	e008      	b.n	8000b82 <command+0x72>
		USART_Send(cmd);
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <command+0x78>)
 8000b72:	f7ff fdd7 	bl	8000724 <USART_Send>
		USART_Send(" Nie ma takiej komendy");
 8000b76:	4809      	ldr	r0, [pc, #36]	; (8000b9c <command+0x8c>)
 8000b78:	f7ff fdd4 	bl	8000724 <USART_Send>
		USART_Send("\r\n");
 8000b7c:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <command+0x90>)
 8000b7e:	f7ff fdd1 	bl	8000724 <USART_Send>
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000d78 	.word	0x20000d78
 8000b8c:	080037a8 	.word	0x080037a8
 8000b90:	080037ac 	.word	0x080037ac
 8000b94:	080037b0 	.word	0x080037b0
 8000b98:	080037b4 	.word	0x080037b4
 8000b9c:	080037b8 	.word	0x080037b8
 8000ba0:	080037a4 	.word	0x080037a4

08000ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	UART_Begin();
 8000ba8:	f7ff fd50 	bl	800064c <UART_Begin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bac:	f000 fa44 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb0:	f000 f894 	bl	8000cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb4:	f7ff fcf8 	bl	80005a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000bb8:	f000 f99a 	bl	8000ef0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &Rx.array[Rx.empty], 1); // USART przerwania
 8000bbc:	4b3d      	ldr	r3, [pc, #244]	; (8000cb4 <main+0x110>)
 8000bbe:	785b      	ldrb	r3, [r3, #1]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4b3b      	ldr	r3, [pc, #236]	; (8000cb4 <main+0x110>)
 8000bc6:	4413      	add	r3, r2
 8000bc8:	3302      	adds	r3, #2
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4619      	mov	r1, r3
 8000bce:	483a      	ldr	r0, [pc, #232]	; (8000cb8 <main+0x114>)
 8000bd0:	f001 fac0 	bl	8002154 <HAL_UART_Receive_IT>
   * Naprawić błąd :: po drugiej
   *
   */
  while (1)
  {
	  if (Rx.busy != Rx.empty){
 8000bd4:	4b37      	ldr	r3, [pc, #220]	; (8000cb4 <main+0x110>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4b36      	ldr	r3, [pc, #216]	; (8000cb4 <main+0x110>)
 8000bdc:	785b      	ldrb	r3, [r3, #1]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d0f7      	beq.n	8000bd4 <main+0x30>
		  if (ramkaStan == 0){
 8000be4:	4b35      	ldr	r3, [pc, #212]	; (8000cbc <main+0x118>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d11c      	bne.n	8000c26 <main+0x82>
			  ramkaZnak = Rx.array[Rx.busy];
 8000bec:	4b31      	ldr	r3, [pc, #196]	; (8000cb4 <main+0x110>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	4b2f      	ldr	r3, [pc, #188]	; (8000cb4 <main+0x110>)
 8000bf6:	4413      	add	r3, r2
 8000bf8:	789a      	ldrb	r2, [r3, #2]
 8000bfa:	4b31      	ldr	r3, [pc, #196]	; (8000cc0 <main+0x11c>)
 8000bfc:	701a      	strb	r2, [r3, #0]

			  if(ramkaZnak == 0x3A){ //Sprawdzanie czy pierwszy znak to :
 8000bfe:	4b30      	ldr	r3, [pc, #192]	; (8000cc0 <main+0x11c>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b3a      	cmp	r3, #58	; 0x3a
 8000c04:	d105      	bne.n	8000c12 <main+0x6e>
				  ramkaStan = 1; // Jak tak to znaczy że zaczynamu odbiór ramki
 8000c06:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <main+0x118>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	701a      	strb	r2, [r3, #0]
				  ramkaLenght = 0; // Długość ramki póki co to 0;
 8000c0c:	4b2d      	ldr	r3, [pc, #180]	; (8000cc4 <main+0x120>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
			  }

			  Rx.busy++;
 8000c12:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <main+0x110>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	3301      	adds	r3, #1
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <main+0x110>)
 8000c1e:	701a      	strb	r2, [r3, #0]
			  if (Rx.busy >= sizeOfBuffor){
 8000c20:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <main+0x110>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	e7d6      	b.n	8000bd4 <main+0x30>
				  Rx.busy = 0;
			  }
		  }else if(ramkaStan == 1){ // Jeżeli stan == 1 to znacyz że znalazło początek
 8000c26:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <main+0x118>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d1d2      	bne.n	8000bd4 <main+0x30>
			  ramkaZnak = Rx.array[Rx.busy]; //Pobieranie znaku z bufora
 8000c2e:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <main+0x110>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <main+0x110>)
 8000c38:	4413      	add	r3, r2
 8000c3a:	789a      	ldrb	r2, [r3, #2]
 8000c3c:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <main+0x11c>)
 8000c3e:	701a      	strb	r2, [r3, #0]

			  ramka[ramkaLenght] = ramkaZnak; //Wkładamy do tablicy ramki znak pobrany z bufora.
 8000c40:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <main+0x120>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <main+0x11c>)
 8000c48:	7819      	ldrb	r1, [r3, #0]
 8000c4a:	4b1f      	ldr	r3, [pc, #124]	; (8000cc8 <main+0x124>)
 8000c4c:	5499      	strb	r1, [r3, r2]
			  ramkaLenght++;
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <main+0x120>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	3301      	adds	r3, #1
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <main+0x120>)
 8000c58:	701a      	strb	r2, [r3, #0]

			  Rx.busy++; // Zwiększamy busy o 1
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <main+0x110>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	3301      	adds	r3, #1
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <main+0x110>)
 8000c66:	701a      	strb	r2, [r3, #0]
			  if (Rx.busy >= sizeOfBuffor){ //Sprawdzamy czy nie wykracza poza rozmiar tablicy
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <main+0x110>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
				  Rx.busy = 0; // Jak tak to robi kółko
			  }

			  if (ramkaZnak == 0x3B){ // Jeżeli znak końca ramki
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <main+0x11c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b3b      	cmp	r3, #59	; 0x3b
 8000c72:	d1af      	bne.n	8000bd4 <main+0x30>
				  //USART_Send("[Ramka] test");
				  //USART_Send("\r\n");
				  memcpy(cmd, &ramka[0], 3);
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <main+0x128>)
 8000c76:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <main+0x124>)
 8000c78:	8811      	ldrh	r1, [r2, #0]
 8000c7a:	7892      	ldrb	r2, [r2, #2]
 8000c7c:	8019      	strh	r1, [r3, #0]
 8000c7e:	709a      	strb	r2, [r3, #2]
				  //USART_Send(cmd);
				  memcpy(rDane, &ramka[3], ramkaLenght - 4);
 8000c80:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <main+0x120>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	3b04      	subs	r3, #4
 8000c86:	461a      	mov	r2, r3
 8000c88:	4911      	ldr	r1, [pc, #68]	; (8000cd0 <main+0x12c>)
 8000c8a:	4812      	ldr	r0, [pc, #72]	; (8000cd4 <main+0x130>)
 8000c8c:	f002 f8fc 	bl	8002e88 <memcpy>
				  command();
 8000c90:	f7ff ff3e 	bl	8000b10 <command>

				  ramkaStan = 0;
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <main+0x118>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
				  ramkaLenght = 0;
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <main+0x120>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
				  memset(rDane, 0, 100);
 8000ca0:	2264      	movs	r2, #100	; 0x64
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	480b      	ldr	r0, [pc, #44]	; (8000cd4 <main+0x130>)
 8000ca6:	f002 f8fd 	bl	8002ea4 <memset>
				  USART_Send("\r\n");
 8000caa:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <main+0x134>)
 8000cac:	f7ff fd3a 	bl	8000724 <USART_Send>
	  if (Rx.busy != Rx.empty){
 8000cb0:	e790      	b.n	8000bd4 <main+0x30>
 8000cb2:	bf00      	nop
 8000cb4:	200000a8 	.word	0x200000a8
 8000cb8:	20000d7c 	.word	0x20000d7c
 8000cbc:	2000008c 	.word	0x2000008c
 8000cc0:	200004aa 	.word	0x200004aa
 8000cc4:	2000008d 	.word	0x2000008d
 8000cc8:	200004ac 	.word	0x200004ac
 8000ccc:	20000d78 	.word	0x20000d78
 8000cd0:	200004af 	.word	0x200004af
 8000cd4:	20000910 	.word	0x20000910
 8000cd8:	080037a4 	.word	0x080037a4

08000cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b094      	sub	sp, #80	; 0x50
 8000ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce2:	f107 0320 	add.w	r3, r7, #32
 8000ce6:	2230      	movs	r2, #48	; 0x30
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f002 f8da 	bl	8002ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <SystemClock_Config+0xb8>)
 8000d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d08:	4a22      	ldr	r2, [pc, #136]	; (8000d94 <SystemClock_Config+0xb8>)
 8000d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <SystemClock_Config+0xb8>)
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <SystemClock_Config+0xbc>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d28:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <SystemClock_Config+0xbc>)
 8000d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d2e:	6013      	str	r3, [r2, #0]
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <SystemClock_Config+0xbc>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d40:	2301      	movs	r3, #1
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d44:	2310      	movs	r3, #16
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4c:	f107 0320 	add.w	r3, r7, #32
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 fd25 	bl	80017a0 <HAL_RCC_OscConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d5c:	f000 f81e 	bl	8000d9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d60:	230f      	movs	r3, #15
 8000d62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d64:	2300      	movs	r3, #0
 8000d66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f000 ff88 	bl	8001c90 <HAL_RCC_ClockConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d86:	f000 f809 	bl	8000d9c <Error_Handler>
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	3750      	adds	r7, #80	; 0x50
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40007000 	.word	0x40007000

08000d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000da0:	b672      	cpsid	i
}
 8000da2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <Error_Handler+0x8>
	...

08000da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <HAL_MspInit+0x4c>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	4a0f      	ldr	r2, [pc, #60]	; (8000df4 <HAL_MspInit+0x4c>)
 8000db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	; (8000df4 <HAL_MspInit+0x4c>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	603b      	str	r3, [r7, #0]
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <HAL_MspInit+0x4c>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <HAL_MspInit+0x4c>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_MspInit+0x4c>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <NMI_Handler+0x4>

08000dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e44:	f000 f94a 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <USART2_IRQHandler+0x10>)
 8000e52:	f001 f9af 	bl	80021b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000d7c 	.word	0x20000d7c

08000e60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e68:	4a14      	ldr	r2, [pc, #80]	; (8000ebc <_sbrk+0x5c>)
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <_sbrk+0x60>)
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <_sbrk+0x64>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d102      	bne.n	8000e82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <_sbrk+0x64>)
 8000e7e:	4a12      	ldr	r2, [pc, #72]	; (8000ec8 <_sbrk+0x68>)
 8000e80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d207      	bcs.n	8000ea0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e90:	f001 ffd0 	bl	8002e34 <__errno>
 8000e94:	4603      	mov	r3, r0
 8000e96:	220c      	movs	r2, #12
 8000e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9e:	e009      	b.n	8000eb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <_sbrk+0x64>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4413      	add	r3, r2
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <_sbrk+0x64>)
 8000eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20018000 	.word	0x20018000
 8000ec0:	00000400 	.word	0x00000400
 8000ec4:	20000090 	.word	0x20000090
 8000ec8:	20000dd8 	.word	0x20000dd8

08000ecc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <SystemInit+0x20>)
 8000ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed6:	4a05      	ldr	r2, [pc, #20]	; (8000eec <SystemInit+0x20>)
 8000ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <MX_USART2_UART_Init+0x50>)
 8000ef8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f14:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f16:	220c      	movs	r2, #12
 8000f18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_USART2_UART_Init+0x4c>)
 8000f28:	f001 f882 	bl	8002030 <HAL_UART_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f32:	f7ff ff33 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000d7c 	.word	0x20000d7c
 8000f40:	40004400 	.word	0x40004400

08000f44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a1d      	ldr	r2, [pc, #116]	; (8000fd8 <HAL_UART_MspInit+0x94>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d133      	bne.n	8000fce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <HAL_UART_MspInit+0x98>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a1b      	ldr	r2, [pc, #108]	; (8000fdc <HAL_UART_MspInit+0x98>)
 8000f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <HAL_UART_MspInit+0x98>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <HAL_UART_MspInit+0x98>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <HAL_UART_MspInit+0x98>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_UART_MspInit+0x98>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f9e:	230c      	movs	r3, #12
 8000fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000faa:	2303      	movs	r3, #3
 8000fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fae:	2307      	movs	r3, #7
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <HAL_UART_MspInit+0x9c>)
 8000fba:	f000 fa53 	bl	8001464 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2026      	movs	r0, #38	; 0x26
 8000fc4:	f000 f985 	bl	80012d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fc8:	2026      	movs	r0, #38	; 0x26
 8000fca:	f000 f99e 	bl	800130a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	; 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40004400 	.word	0x40004400
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020000 	.word	0x40020000

08000fe4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800101c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fea:	490e      	ldr	r1, [pc, #56]	; (8001024 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fec:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001000:	4c0b      	ldr	r4, [pc, #44]	; (8001030 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800100e:	f7ff ff5d 	bl	8000ecc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001012:	f001 ff15 	bl	8002e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001016:	f7ff fdc5 	bl	8000ba4 <main>
  bx  lr    
 800101a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800101c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001024:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001028:	0800382c 	.word	0x0800382c
  ldr r2, =_sbss
 800102c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001030:	20000dd4 	.word	0x20000dd4

08001034 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001034:	e7fe      	b.n	8001034 <ADC_IRQHandler>
	...

08001038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <HAL_Init+0x40>)
 8001042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001046:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <HAL_Init+0x40>)
 800104e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001052:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <HAL_Init+0x40>)
 800105a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001060:	2003      	movs	r0, #3
 8001062:	f000 f92b 	bl	80012bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001066:	200f      	movs	r0, #15
 8001068:	f000 f808 	bl	800107c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800106c:	f7ff fe9c 	bl	8000da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023c00 	.word	0x40023c00

0800107c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_InitTick+0x54>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_InitTick+0x58>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001092:	fbb3 f3f1 	udiv	r3, r3, r1
 8001096:	fbb2 f3f3 	udiv	r3, r2, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f943 	bl	8001326 <HAL_SYSTICK_Config>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00e      	b.n	80010c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d80a      	bhi.n	80010c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f000 f90b 	bl	80012d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010bc:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <HAL_InitTick+0x5c>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e000      	b.n	80010c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20000008 	.word	0x20000008
 80010d8:	20000004 	.word	0x20000004

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000dc0 	.word	0x20000dc0

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000dc0 	.word	0x20000dc0

0800111c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800114c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114e:	4a04      	ldr	r2, [pc, #16]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	60d3      	str	r3, [r2, #12]
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	db0b      	blt.n	80011aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	f003 021f 	and.w	r2, r3, #31
 8001198:	4907      	ldr	r1, [pc, #28]	; (80011b8 <__NVIC_EnableIRQ+0x38>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	095b      	lsrs	r3, r3, #5
 80011a0:	2001      	movs	r0, #1
 80011a2:	fa00 f202 	lsl.w	r2, r0, r2
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000e100 	.word	0xe000e100

080011bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db0a      	blt.n	80011e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	490c      	ldr	r1, [pc, #48]	; (8001208 <__NVIC_SetPriority+0x4c>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	440b      	add	r3, r1
 80011e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e4:	e00a      	b.n	80011fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4908      	ldr	r1, [pc, #32]	; (800120c <__NVIC_SetPriority+0x50>)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	3b04      	subs	r3, #4
 80011f4:	0112      	lsls	r2, r2, #4
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	440b      	add	r3, r1
 80011fa:	761a      	strb	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000e100 	.word	0xe000e100
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f1c3 0307 	rsb	r3, r3, #7
 800122a:	2b04      	cmp	r3, #4
 800122c:	bf28      	it	cs
 800122e:	2304      	movcs	r3, #4
 8001230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3304      	adds	r3, #4
 8001236:	2b06      	cmp	r3, #6
 8001238:	d902      	bls.n	8001240 <NVIC_EncodePriority+0x30>
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3b03      	subs	r3, #3
 800123e:	e000      	b.n	8001242 <NVIC_EncodePriority+0x32>
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	f04f 32ff 	mov.w	r2, #4294967295
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	401a      	ands	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001258:	f04f 31ff 	mov.w	r1, #4294967295
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	43d9      	mvns	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	4313      	orrs	r3, r2
         );
}
 800126a:	4618      	mov	r0, r3
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001288:	d301      	bcc.n	800128e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800128a:	2301      	movs	r3, #1
 800128c:	e00f      	b.n	80012ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128e:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <SysTick_Config+0x40>)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001296:	210f      	movs	r1, #15
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f7ff ff8e 	bl	80011bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <SysTick_Config+0x40>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a6:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <SysTick_Config+0x40>)
 80012a8:	2207      	movs	r2, #7
 80012aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	e000e010 	.word	0xe000e010

080012bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f7ff ff29 	bl	800111c <__NVIC_SetPriorityGrouping>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e4:	f7ff ff3e 	bl	8001164 <__NVIC_GetPriorityGrouping>
 80012e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	68b9      	ldr	r1, [r7, #8]
 80012ee:	6978      	ldr	r0, [r7, #20]
 80012f0:	f7ff ff8e 	bl	8001210 <NVIC_EncodePriority>
 80012f4:	4602      	mov	r2, r0
 80012f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff ff5d 	bl	80011bc <__NVIC_SetPriority>
}
 8001302:	bf00      	nop
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff31 	bl	8001180 <__NVIC_EnableIRQ>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ffa2 	bl	8001278 <SysTick_Config>
 8001334:	4603      	mov	r3, r0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800134c:	f7ff feda 	bl	8001104 <HAL_GetTick>
 8001350:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d008      	beq.n	8001370 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2280      	movs	r2, #128	; 0x80
 8001362:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e052      	b.n	8001416 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0216 	bic.w	r2, r2, #22
 800137e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	695a      	ldr	r2, [r3, #20]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800138e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	2b00      	cmp	r3, #0
 8001396:	d103      	bne.n	80013a0 <HAL_DMA_Abort+0x62>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800139c:	2b00      	cmp	r3, #0
 800139e:	d007      	beq.n	80013b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0208 	bic.w	r2, r2, #8
 80013ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0201 	bic.w	r2, r2, #1
 80013be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c0:	e013      	b.n	80013ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013c2:	f7ff fe9f 	bl	8001104 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b05      	cmp	r3, #5
 80013ce:	d90c      	bls.n	80013ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2220      	movs	r2, #32
 80013d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2203      	movs	r2, #3
 80013da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e015      	b.n	8001416 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1e4      	bne.n	80013c2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fc:	223f      	movs	r2, #63	; 0x3f
 80013fe:	409a      	lsls	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d004      	beq.n	800143c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2280      	movs	r2, #128	; 0x80
 8001436:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e00c      	b.n	8001456 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2205      	movs	r2, #5
 8001440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0201 	bic.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001464:	b480      	push	{r7}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001476:	2300      	movs	r3, #0
 8001478:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
 800147e:	e159      	b.n	8001734 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001480:	2201      	movs	r2, #1
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	429a      	cmp	r2, r3
 800149a:	f040 8148 	bne.w	800172e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 0303 	and.w	r3, r3, #3
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d005      	beq.n	80014b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d130      	bne.n	8001518 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	2203      	movs	r2, #3
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014ec:	2201      	movs	r2, #1
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4013      	ands	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	091b      	lsrs	r3, r3, #4
 8001502:	f003 0201 	and.w	r2, r3, #1
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	2b03      	cmp	r3, #3
 8001522:	d017      	beq.n	8001554 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	2203      	movs	r2, #3
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4313      	orrs	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d123      	bne.n	80015a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	08da      	lsrs	r2, r3, #3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3208      	adds	r2, #8
 8001568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	220f      	movs	r2, #15
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	691a      	ldr	r2, [r3, #16]
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	08da      	lsrs	r2, r3, #3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3208      	adds	r2, #8
 80015a2:	69b9      	ldr	r1, [r7, #24]
 80015a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	2203      	movs	r2, #3
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0203 	and.w	r2, r3, #3
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 80a2 	beq.w	800172e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	4b57      	ldr	r3, [pc, #348]	; (800174c <HAL_GPIO_Init+0x2e8>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	4a56      	ldr	r2, [pc, #344]	; (800174c <HAL_GPIO_Init+0x2e8>)
 80015f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f8:	6453      	str	r3, [r2, #68]	; 0x44
 80015fa:	4b54      	ldr	r3, [pc, #336]	; (800174c <HAL_GPIO_Init+0x2e8>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001606:	4a52      	ldr	r2, [pc, #328]	; (8001750 <HAL_GPIO_Init+0x2ec>)
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	3302      	adds	r3, #2
 800160e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	220f      	movs	r2, #15
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a49      	ldr	r2, [pc, #292]	; (8001754 <HAL_GPIO_Init+0x2f0>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d019      	beq.n	8001666 <HAL_GPIO_Init+0x202>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a48      	ldr	r2, [pc, #288]	; (8001758 <HAL_GPIO_Init+0x2f4>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d013      	beq.n	8001662 <HAL_GPIO_Init+0x1fe>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a47      	ldr	r2, [pc, #284]	; (800175c <HAL_GPIO_Init+0x2f8>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d00d      	beq.n	800165e <HAL_GPIO_Init+0x1fa>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a46      	ldr	r2, [pc, #280]	; (8001760 <HAL_GPIO_Init+0x2fc>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d007      	beq.n	800165a <HAL_GPIO_Init+0x1f6>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a45      	ldr	r2, [pc, #276]	; (8001764 <HAL_GPIO_Init+0x300>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d101      	bne.n	8001656 <HAL_GPIO_Init+0x1f2>
 8001652:	2304      	movs	r3, #4
 8001654:	e008      	b.n	8001668 <HAL_GPIO_Init+0x204>
 8001656:	2307      	movs	r3, #7
 8001658:	e006      	b.n	8001668 <HAL_GPIO_Init+0x204>
 800165a:	2303      	movs	r3, #3
 800165c:	e004      	b.n	8001668 <HAL_GPIO_Init+0x204>
 800165e:	2302      	movs	r3, #2
 8001660:	e002      	b.n	8001668 <HAL_GPIO_Init+0x204>
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <HAL_GPIO_Init+0x204>
 8001666:	2300      	movs	r3, #0
 8001668:	69fa      	ldr	r2, [r7, #28]
 800166a:	f002 0203 	and.w	r2, r2, #3
 800166e:	0092      	lsls	r2, r2, #2
 8001670:	4093      	lsls	r3, r2
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001678:	4935      	ldr	r1, [pc, #212]	; (8001750 <HAL_GPIO_Init+0x2ec>)
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	089b      	lsrs	r3, r3, #2
 800167e:	3302      	adds	r3, #2
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001686:	4b38      	ldr	r3, [pc, #224]	; (8001768 <HAL_GPIO_Init+0x304>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016aa:	4a2f      	ldr	r2, [pc, #188]	; (8001768 <HAL_GPIO_Init+0x304>)
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016b0:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <HAL_GPIO_Init+0x304>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016d4:	4a24      	ldr	r2, [pc, #144]	; (8001768 <HAL_GPIO_Init+0x304>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016da:	4b23      	ldr	r3, [pc, #140]	; (8001768 <HAL_GPIO_Init+0x304>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016fe:	4a1a      	ldr	r2, [pc, #104]	; (8001768 <HAL_GPIO_Init+0x304>)
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001704:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_GPIO_Init+0x304>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001728:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <HAL_GPIO_Init+0x304>)
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3301      	adds	r3, #1
 8001732:	61fb      	str	r3, [r7, #28]
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	2b0f      	cmp	r3, #15
 8001738:	f67f aea2 	bls.w	8001480 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	3724      	adds	r7, #36	; 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800
 8001750:	40013800 	.word	0x40013800
 8001754:	40020000 	.word	0x40020000
 8001758:	40020400 	.word	0x40020400
 800175c:	40020800 	.word	0x40020800
 8001760:	40020c00 	.word	0x40020c00
 8001764:	40021000 	.word	0x40021000
 8001768:	40013c00 	.word	0x40013c00

0800176c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	807b      	strh	r3, [r7, #2]
 8001778:	4613      	mov	r3, r2
 800177a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800177c:	787b      	ldrb	r3, [r7, #1]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001782:	887a      	ldrh	r2, [r7, #2]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001788:	e003      	b.n	8001792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800178a:	887b      	ldrh	r3, [r7, #2]
 800178c:	041a      	lsls	r2, r3, #16
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	619a      	str	r2, [r3, #24]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
	...

080017a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e264      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d075      	beq.n	80018aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017be:	4ba3      	ldr	r3, [pc, #652]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	d00c      	beq.n	80017e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ca:	4ba0      	ldr	r3, [pc, #640]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d112      	bne.n	80017fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017d6:	4b9d      	ldr	r3, [pc, #628]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017e2:	d10b      	bne.n	80017fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e4:	4b99      	ldr	r3, [pc, #612]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d05b      	beq.n	80018a8 <HAL_RCC_OscConfig+0x108>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d157      	bne.n	80018a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e23f      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001804:	d106      	bne.n	8001814 <HAL_RCC_OscConfig+0x74>
 8001806:	4b91      	ldr	r3, [pc, #580]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a90      	ldr	r2, [pc, #576]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 800180c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	e01d      	b.n	8001850 <HAL_RCC_OscConfig+0xb0>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0x98>
 800181e:	4b8b      	ldr	r3, [pc, #556]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a8a      	ldr	r2, [pc, #552]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b88      	ldr	r3, [pc, #544]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a87      	ldr	r2, [pc, #540]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e00b      	b.n	8001850 <HAL_RCC_OscConfig+0xb0>
 8001838:	4b84      	ldr	r3, [pc, #528]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a83      	ldr	r2, [pc, #524]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 800183e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b81      	ldr	r3, [pc, #516]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a80      	ldr	r2, [pc, #512]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 800184a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800184e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d013      	beq.n	8001880 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff fc54 	bl	8001104 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001860:	f7ff fc50 	bl	8001104 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b64      	cmp	r3, #100	; 0x64
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e204      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001872:	4b76      	ldr	r3, [pc, #472]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0xc0>
 800187e:	e014      	b.n	80018aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff fc40 	bl	8001104 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff fc3c 	bl	8001104 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	; 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e1f0      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800189a:	4b6c      	ldr	r3, [pc, #432]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0xe8>
 80018a6:	e000      	b.n	80018aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d063      	beq.n	800197e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018b6:	4b65      	ldr	r3, [pc, #404]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00b      	beq.n	80018da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018c2:	4b62      	ldr	r3, [pc, #392]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d11c      	bne.n	8001908 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ce:	4b5f      	ldr	r3, [pc, #380]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d116      	bne.n	8001908 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018da:	4b5c      	ldr	r3, [pc, #368]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d005      	beq.n	80018f2 <HAL_RCC_OscConfig+0x152>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d001      	beq.n	80018f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e1c4      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f2:	4b56      	ldr	r3, [pc, #344]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	4952      	ldr	r1, [pc, #328]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001902:	4313      	orrs	r3, r2
 8001904:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001906:	e03a      	b.n	800197e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d020      	beq.n	8001952 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001910:	4b4f      	ldr	r3, [pc, #316]	; (8001a50 <HAL_RCC_OscConfig+0x2b0>)
 8001912:	2201      	movs	r2, #1
 8001914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001916:	f7ff fbf5 	bl	8001104 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800191e:	f7ff fbf1 	bl	8001104 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e1a5      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001930:	4b46      	ldr	r3, [pc, #280]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193c:	4b43      	ldr	r3, [pc, #268]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	4940      	ldr	r1, [pc, #256]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 800194c:	4313      	orrs	r3, r2
 800194e:	600b      	str	r3, [r1, #0]
 8001950:	e015      	b.n	800197e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001952:	4b3f      	ldr	r3, [pc, #252]	; (8001a50 <HAL_RCC_OscConfig+0x2b0>)
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001958:	f7ff fbd4 	bl	8001104 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001960:	f7ff fbd0 	bl	8001104 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e184      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001972:	4b36      	ldr	r3, [pc, #216]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1f0      	bne.n	8001960 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0308 	and.w	r3, r3, #8
 8001986:	2b00      	cmp	r3, #0
 8001988:	d030      	beq.n	80019ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d016      	beq.n	80019c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001992:	4b30      	ldr	r3, [pc, #192]	; (8001a54 <HAL_RCC_OscConfig+0x2b4>)
 8001994:	2201      	movs	r2, #1
 8001996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001998:	f7ff fbb4 	bl	8001104 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a0:	f7ff fbb0 	bl	8001104 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e164      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019b2:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0f0      	beq.n	80019a0 <HAL_RCC_OscConfig+0x200>
 80019be:	e015      	b.n	80019ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c0:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <HAL_RCC_OscConfig+0x2b4>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c6:	f7ff fb9d 	bl	8001104 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ce:	f7ff fb99 	bl	8001104 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e14d      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e0:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 80019e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1f0      	bne.n	80019ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80a0 	beq.w	8001b3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fa:	2300      	movs	r3, #0
 80019fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10f      	bne.n	8001a2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	4a0e      	ldr	r2, [pc, #56]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <HAL_RCC_OscConfig+0x2ac>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a26:	2301      	movs	r3, #1
 8001a28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_RCC_OscConfig+0x2b8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d121      	bne.n	8001a7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <HAL_RCC_OscConfig+0x2b8>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a07      	ldr	r2, [pc, #28]	; (8001a58 <HAL_RCC_OscConfig+0x2b8>)
 8001a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a42:	f7ff fb5f 	bl	8001104 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a48:	e011      	b.n	8001a6e <HAL_RCC_OscConfig+0x2ce>
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	42470000 	.word	0x42470000
 8001a54:	42470e80 	.word	0x42470e80
 8001a58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a5c:	f7ff fb52 	bl	8001104 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e106      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6e:	4b85      	ldr	r3, [pc, #532]	; (8001c84 <HAL_RCC_OscConfig+0x4e4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d106      	bne.n	8001a90 <HAL_RCC_OscConfig+0x2f0>
 8001a82:	4b81      	ldr	r3, [pc, #516]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a86:	4a80      	ldr	r2, [pc, #512]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a8e:	e01c      	b.n	8001aca <HAL_RCC_OscConfig+0x32a>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b05      	cmp	r3, #5
 8001a96:	d10c      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x312>
 8001a98:	4b7b      	ldr	r3, [pc, #492]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9c:	4a7a      	ldr	r2, [pc, #488]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001a9e:	f043 0304 	orr.w	r3, r3, #4
 8001aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8001aa4:	4b78      	ldr	r3, [pc, #480]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa8:	4a77      	ldr	r2, [pc, #476]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6713      	str	r3, [r2, #112]	; 0x70
 8001ab0:	e00b      	b.n	8001aca <HAL_RCC_OscConfig+0x32a>
 8001ab2:	4b75      	ldr	r3, [pc, #468]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab6:	4a74      	ldr	r2, [pc, #464]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001ab8:	f023 0301 	bic.w	r3, r3, #1
 8001abc:	6713      	str	r3, [r2, #112]	; 0x70
 8001abe:	4b72      	ldr	r3, [pc, #456]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac2:	4a71      	ldr	r2, [pc, #452]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001ac4:	f023 0304 	bic.w	r3, r3, #4
 8001ac8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d015      	beq.n	8001afe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad2:	f7ff fb17 	bl	8001104 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad8:	e00a      	b.n	8001af0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ada:	f7ff fb13 	bl	8001104 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e0c5      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af0:	4b65      	ldr	r3, [pc, #404]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0ee      	beq.n	8001ada <HAL_RCC_OscConfig+0x33a>
 8001afc:	e014      	b.n	8001b28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afe:	f7ff fb01 	bl	8001104 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b04:	e00a      	b.n	8001b1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b06:	f7ff fafd 	bl	8001104 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e0af      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1c:	4b5a      	ldr	r3, [pc, #360]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1ee      	bne.n	8001b06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b28:	7dfb      	ldrb	r3, [r7, #23]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d105      	bne.n	8001b3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b2e:	4b56      	ldr	r3, [pc, #344]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a55      	ldr	r2, [pc, #340]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001b34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 809b 	beq.w	8001c7a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b44:	4b50      	ldr	r3, [pc, #320]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d05c      	beq.n	8001c0a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d141      	bne.n	8001bdc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b58:	4b4c      	ldr	r3, [pc, #304]	; (8001c8c <HAL_RCC_OscConfig+0x4ec>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5e:	f7ff fad1 	bl	8001104 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b66:	f7ff facd 	bl	8001104 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e081      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b78:	4b43      	ldr	r3, [pc, #268]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f0      	bne.n	8001b66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69da      	ldr	r2, [r3, #28]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b92:	019b      	lsls	r3, r3, #6
 8001b94:	431a      	orrs	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9a:	085b      	lsrs	r3, r3, #1
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	041b      	lsls	r3, r3, #16
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	061b      	lsls	r3, r3, #24
 8001ba8:	4937      	ldr	r1, [pc, #220]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bae:	4b37      	ldr	r3, [pc, #220]	; (8001c8c <HAL_RCC_OscConfig+0x4ec>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7ff faa6 	bl	8001104 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bbc:	f7ff faa2 	bl	8001104 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e056      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bce:	4b2e      	ldr	r3, [pc, #184]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x41c>
 8001bda:	e04e      	b.n	8001c7a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	; (8001c8c <HAL_RCC_OscConfig+0x4ec>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be2:	f7ff fa8f 	bl	8001104 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bea:	f7ff fa8b 	bl	8001104 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e03f      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfc:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1f0      	bne.n	8001bea <HAL_RCC_OscConfig+0x44a>
 8001c08:	e037      	b.n	8001c7a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	699b      	ldr	r3, [r3, #24]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d101      	bne.n	8001c16 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e032      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <HAL_RCC_OscConfig+0x4e8>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d028      	beq.n	8001c76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d121      	bne.n	8001c76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d11a      	bne.n	8001c76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c46:	4013      	ands	r3, r2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c4c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d111      	bne.n	8001c76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	085b      	lsrs	r3, r3, #1
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d107      	bne.n	8001c76 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d001      	beq.n	8001c7a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40007000 	.word	0x40007000
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	42470060 	.word	0x42470060

08001c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0cc      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b68      	ldr	r3, [pc, #416]	; (8001e48 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d90c      	bls.n	8001ccc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	4b65      	ldr	r3, [pc, #404]	; (8001e48 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cba:	4b63      	ldr	r3, [pc, #396]	; (8001e48 <HAL_RCC_ClockConfig+0x1b8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0b8      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d020      	beq.n	8001d1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce4:	4b59      	ldr	r3, [pc, #356]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4a58      	ldr	r2, [pc, #352]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cfc:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	4a52      	ldr	r2, [pc, #328]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d08:	4b50      	ldr	r3, [pc, #320]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	494d      	ldr	r1, [pc, #308]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d044      	beq.n	8001db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d107      	bne.n	8001d3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	4b47      	ldr	r3, [pc, #284]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d119      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e07f      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d003      	beq.n	8001d4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d4e:	4b3f      	ldr	r3, [pc, #252]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d109      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e06f      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5e:	4b3b      	ldr	r3, [pc, #236]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e067      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d6e:	4b37      	ldr	r3, [pc, #220]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f023 0203 	bic.w	r2, r3, #3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4934      	ldr	r1, [pc, #208]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d80:	f7ff f9c0 	bl	8001104 <HAL_GetTick>
 8001d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d86:	e00a      	b.n	8001d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d88:	f7ff f9bc 	bl	8001104 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e04f      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9e:	4b2b      	ldr	r3, [pc, #172]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 020c 	and.w	r2, r3, #12
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d1eb      	bne.n	8001d88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001db0:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <HAL_RCC_ClockConfig+0x1b8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d20c      	bcs.n	8001dd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dbe:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc6:	4b20      	ldr	r3, [pc, #128]	; (8001e48 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0307 	and.w	r3, r3, #7
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e032      	b.n	8001e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de4:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	4916      	ldr	r1, [pc, #88]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d009      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e02:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	490e      	ldr	r1, [pc, #56]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e16:	f000 f821 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	490a      	ldr	r1, [pc, #40]	; (8001e50 <HAL_RCC_ClockConfig+0x1c0>)
 8001e28:	5ccb      	ldrb	r3, [r1, r3]
 8001e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2e:	4a09      	ldr	r2, [pc, #36]	; (8001e54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_RCC_ClockConfig+0x1c8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff f920 	bl	800107c <HAL_InitTick>

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023c00 	.word	0x40023c00
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	080037d0 	.word	0x080037d0
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000004 	.word	0x20000004

08001e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e5c:	b5b0      	push	{r4, r5, r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e62:	2100      	movs	r1, #0
 8001e64:	6079      	str	r1, [r7, #4]
 8001e66:	2100      	movs	r1, #0
 8001e68:	60f9      	str	r1, [r7, #12]
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e6e:	2100      	movs	r1, #0
 8001e70:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e72:	4952      	ldr	r1, [pc, #328]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x160>)
 8001e74:	6889      	ldr	r1, [r1, #8]
 8001e76:	f001 010c 	and.w	r1, r1, #12
 8001e7a:	2908      	cmp	r1, #8
 8001e7c:	d00d      	beq.n	8001e9a <HAL_RCC_GetSysClockFreq+0x3e>
 8001e7e:	2908      	cmp	r1, #8
 8001e80:	f200 8094 	bhi.w	8001fac <HAL_RCC_GetSysClockFreq+0x150>
 8001e84:	2900      	cmp	r1, #0
 8001e86:	d002      	beq.n	8001e8e <HAL_RCC_GetSysClockFreq+0x32>
 8001e88:	2904      	cmp	r1, #4
 8001e8a:	d003      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x38>
 8001e8c:	e08e      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e8e:	4b4c      	ldr	r3, [pc, #304]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x164>)
 8001e90:	60bb      	str	r3, [r7, #8]
       break;
 8001e92:	e08e      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e94:	4b4b      	ldr	r3, [pc, #300]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001e96:	60bb      	str	r3, [r7, #8]
      break;
 8001e98:	e08b      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e9a:	4948      	ldr	r1, [pc, #288]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x160>)
 8001e9c:	6849      	ldr	r1, [r1, #4]
 8001e9e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001ea2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ea4:	4945      	ldr	r1, [pc, #276]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x160>)
 8001ea6:	6849      	ldr	r1, [r1, #4]
 8001ea8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001eac:	2900      	cmp	r1, #0
 8001eae:	d024      	beq.n	8001efa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb0:	4942      	ldr	r1, [pc, #264]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x160>)
 8001eb2:	6849      	ldr	r1, [r1, #4]
 8001eb4:	0989      	lsrs	r1, r1, #6
 8001eb6:	4608      	mov	r0, r1
 8001eb8:	f04f 0100 	mov.w	r1, #0
 8001ebc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001ec0:	f04f 0500 	mov.w	r5, #0
 8001ec4:	ea00 0204 	and.w	r2, r0, r4
 8001ec8:	ea01 0305 	and.w	r3, r1, r5
 8001ecc:	493d      	ldr	r1, [pc, #244]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001ece:	fb01 f003 	mul.w	r0, r1, r3
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	fb01 f102 	mul.w	r1, r1, r2
 8001ed8:	1844      	adds	r4, r0, r1
 8001eda:	493a      	ldr	r1, [pc, #232]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001edc:	fba2 0101 	umull	r0, r1, r2, r1
 8001ee0:	1863      	adds	r3, r4, r1
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	f7fe f9e0 	bl	80002b0 <__aeabi_uldivmod>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	e04a      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001efa:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x160>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	099b      	lsrs	r3, r3, #6
 8001f00:	461a      	mov	r2, r3
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f0a:	f04f 0100 	mov.w	r1, #0
 8001f0e:	ea02 0400 	and.w	r4, r2, r0
 8001f12:	ea03 0501 	and.w	r5, r3, r1
 8001f16:	4620      	mov	r0, r4
 8001f18:	4629      	mov	r1, r5
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	014b      	lsls	r3, r1, #5
 8001f24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f28:	0142      	lsls	r2, r0, #5
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	1b00      	subs	r0, r0, r4
 8001f30:	eb61 0105 	sbc.w	r1, r1, r5
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	f04f 0300 	mov.w	r3, #0
 8001f3c:	018b      	lsls	r3, r1, #6
 8001f3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f42:	0182      	lsls	r2, r0, #6
 8001f44:	1a12      	subs	r2, r2, r0
 8001f46:	eb63 0301 	sbc.w	r3, r3, r1
 8001f4a:	f04f 0000 	mov.w	r0, #0
 8001f4e:	f04f 0100 	mov.w	r1, #0
 8001f52:	00d9      	lsls	r1, r3, #3
 8001f54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f58:	00d0      	lsls	r0, r2, #3
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	1912      	adds	r2, r2, r4
 8001f60:	eb45 0303 	adc.w	r3, r5, r3
 8001f64:	f04f 0000 	mov.w	r0, #0
 8001f68:	f04f 0100 	mov.w	r1, #0
 8001f6c:	0299      	lsls	r1, r3, #10
 8001f6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f72:	0290      	lsls	r0, r2, #10
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	f7fe f994 	bl	80002b0 <__aeabi_uldivmod>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f90:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x160>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	0c1b      	lsrs	r3, r3, #16
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa8:	60bb      	str	r3, [r7, #8]
      break;
 8001faa:	e002      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x164>)
 8001fae:	60bb      	str	r3, [r7, #8]
      break;
 8001fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb2:	68bb      	ldr	r3, [r7, #8]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bdb0      	pop	{r4, r5, r7, pc}
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	00f42400 	.word	0x00f42400
 8001fc4:	017d7840 	.word	0x017d7840

08001fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20000000 	.word	0x20000000

08001fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fe4:	f7ff fff0 	bl	8001fc8 <HAL_RCC_GetHCLKFreq>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	4b05      	ldr	r3, [pc, #20]	; (8002000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	0a9b      	lsrs	r3, r3, #10
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	4903      	ldr	r1, [pc, #12]	; (8002004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ff6:	5ccb      	ldrb	r3, [r1, r3]
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40023800 	.word	0x40023800
 8002004:	080037e0 	.word	0x080037e0

08002008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800200c:	f7ff ffdc 	bl	8001fc8 <HAL_RCC_GetHCLKFreq>
 8002010:	4602      	mov	r2, r0
 8002012:	4b05      	ldr	r3, [pc, #20]	; (8002028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	0b5b      	lsrs	r3, r3, #13
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	4903      	ldr	r1, [pc, #12]	; (800202c <HAL_RCC_GetPCLK2Freq+0x24>)
 800201e:	5ccb      	ldrb	r3, [r1, r3]
 8002020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002024:	4618      	mov	r0, r3
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40023800 	.word	0x40023800
 800202c:	080037e0 	.word	0x080037e0

08002030 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e03f      	b.n	80020c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d106      	bne.n	800205c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7fe ff74 	bl	8000f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2224      	movs	r2, #36	; 0x24
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002072:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 fd15 	bl	8002aa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	691a      	ldr	r2, [r3, #16]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002088:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695a      	ldr	r2, [r3, #20]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002098:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2220      	movs	r2, #32
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2220      	movs	r2, #32
 80020bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b085      	sub	sp, #20
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	4613      	mov	r3, r2
 80020d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b20      	cmp	r3, #32
 80020e2:	d130      	bne.n	8002146 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d002      	beq.n	80020f0 <HAL_UART_Transmit_IT+0x26>
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e029      	b.n	8002148 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_UART_Transmit_IT+0x38>
 80020fe:	2302      	movs	r3, #2
 8002100:	e022      	b.n	8002148 <HAL_UART_Transmit_IT+0x7e>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	88fa      	ldrh	r2, [r7, #6]
 8002114:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	88fa      	ldrh	r2, [r7, #6]
 800211a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2221      	movs	r2, #33	; 0x21
 8002126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002140:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002142:	2300      	movs	r3, #0
 8002144:	e000      	b.n	8002148 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002146:	2302      	movs	r3, #2
  }
}
 8002148:	4618      	mov	r0, r3
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	4613      	mov	r3, r2
 8002160:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b20      	cmp	r3, #32
 800216c:	d11d      	bne.n	80021aa <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <HAL_UART_Receive_IT+0x26>
 8002174:	88fb      	ldrh	r3, [r7, #6]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e016      	b.n	80021ac <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <HAL_UART_Receive_IT+0x38>
 8002188:	2302      	movs	r3, #2
 800218a:	e00f      	b.n	80021ac <HAL_UART_Receive_IT+0x58>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2200      	movs	r2, #0
 8002198:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800219a:	88fb      	ldrh	r3, [r7, #6]
 800219c:	461a      	mov	r2, r3
 800219e:	68b9      	ldr	r1, [r7, #8]
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 faab 	bl	80026fc <UART_Start_Receive_IT>
 80021a6:	4603      	mov	r3, r0
 80021a8:	e000      	b.n	80021ac <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80021aa:	2302      	movs	r3, #2
  }
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b0ba      	sub	sp, #232	; 0xe8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80021da:	2300      	movs	r3, #0
 80021dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80021f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10f      	bne.n	800221a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021fe:	f003 0320 	and.w	r3, r3, #32
 8002202:	2b00      	cmp	r3, #0
 8002204:	d009      	beq.n	800221a <HAL_UART_IRQHandler+0x66>
 8002206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800220a:	f003 0320 	and.w	r3, r3, #32
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fb8b 	bl	800292e <UART_Receive_IT>
      return;
 8002218:	e256      	b.n	80026c8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800221a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 80de 	beq.w	80023e0 <HAL_UART_IRQHandler+0x22c>
 8002224:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d106      	bne.n	800223e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002234:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80d1 	beq.w	80023e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800223e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00b      	beq.n	8002262 <HAL_UART_IRQHandler+0xae>
 800224a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800224e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	f043 0201 	orr.w	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b00      	cmp	r3, #0
 800226c:	d00b      	beq.n	8002286 <HAL_UART_IRQHandler+0xd2>
 800226e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d005      	beq.n	8002286 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f043 0202 	orr.w	r2, r3, #2
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00b      	beq.n	80022aa <HAL_UART_IRQHandler+0xf6>
 8002292:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f043 0204 	orr.w	r2, r3, #4
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80022aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d011      	beq.n	80022da <HAL_UART_IRQHandler+0x126>
 80022b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022ba:	f003 0320 	and.w	r3, r3, #32
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d105      	bne.n	80022ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f043 0208 	orr.w	r2, r3, #8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 81ed 	beq.w	80026be <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d008      	beq.n	8002302 <HAL_UART_IRQHandler+0x14e>
 80022f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d002      	beq.n	8002302 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 fb16 	bl	800292e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230c:	2b40      	cmp	r3, #64	; 0x40
 800230e:	bf0c      	ite	eq
 8002310:	2301      	moveq	r3, #1
 8002312:	2300      	movne	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	d103      	bne.n	800232e <HAL_UART_IRQHandler+0x17a>
 8002326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d04f      	beq.n	80023ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 fa1e 	bl	8002770 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233e:	2b40      	cmp	r3, #64	; 0x40
 8002340:	d141      	bne.n	80023c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	3314      	adds	r3, #20
 8002348:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800234c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002350:	e853 3f00 	ldrex	r3, [r3]
 8002354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800235c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	3314      	adds	r3, #20
 800236a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800236e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002376:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800237a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800237e:	e841 2300 	strex	r3, r2, [r1]
 8002382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1d9      	bne.n	8002342 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002392:	2b00      	cmp	r3, #0
 8002394:	d013      	beq.n	80023be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800239a:	4a7d      	ldr	r2, [pc, #500]	; (8002590 <HAL_UART_IRQHandler+0x3dc>)
 800239c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff f83b 	bl	800141e <HAL_DMA_Abort_IT>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d016      	beq.n	80023dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023b8:	4610      	mov	r0, r2
 80023ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023bc:	e00e      	b.n	80023dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f986 	bl	80026d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023c4:	e00a      	b.n	80023dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f982 	bl	80026d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023cc:	e006      	b.n	80023dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f97e 	bl	80026d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80023da:	e170      	b.n	80026be <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023dc:	bf00      	nop
    return;
 80023de:	e16e      	b.n	80026be <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	f040 814a 	bne.w	800267e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8143 	beq.w	800267e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80023f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023fc:	f003 0310 	and.w	r3, r3, #16
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 813c 	beq.w	800267e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60bb      	str	r3, [r7, #8]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002426:	2b40      	cmp	r3, #64	; 0x40
 8002428:	f040 80b4 	bne.w	8002594 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002438:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 8140 	beq.w	80026c2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800244a:	429a      	cmp	r2, r3
 800244c:	f080 8139 	bcs.w	80026c2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002456:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002462:	f000 8088 	beq.w	8002576 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	330c      	adds	r3, #12
 800246c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002470:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002474:	e853 3f00 	ldrex	r3, [r3]
 8002478:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800247c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	330c      	adds	r3, #12
 800248e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002492:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002496:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800249a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800249e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024a2:	e841 2300 	strex	r3, r2, [r1]
 80024a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80024aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1d9      	bne.n	8002466 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	3314      	adds	r3, #20
 80024b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024bc:	e853 3f00 	ldrex	r3, [r3]
 80024c0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80024c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024c4:	f023 0301 	bic.w	r3, r3, #1
 80024c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	3314      	adds	r3, #20
 80024d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024d6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80024da:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024dc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80024de:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80024e2:	e841 2300 	strex	r3, r2, [r1]
 80024e6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80024e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1e1      	bne.n	80024b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	3314      	adds	r3, #20
 80024f4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024f8:	e853 3f00 	ldrex	r3, [r3]
 80024fc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80024fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002504:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	3314      	adds	r3, #20
 800250e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002512:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002514:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002516:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002518:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800251a:	e841 2300 	strex	r3, r2, [r1]
 800251e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1e3      	bne.n	80024ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2220      	movs	r2, #32
 800252a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	330c      	adds	r3, #12
 800253a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800253c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800253e:	e853 3f00 	ldrex	r3, [r3]
 8002542:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002546:	f023 0310 	bic.w	r3, r3, #16
 800254a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	330c      	adds	r3, #12
 8002554:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002558:	65ba      	str	r2, [r7, #88]	; 0x58
 800255a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800255c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800255e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002560:	e841 2300 	strex	r3, r2, [r1]
 8002564:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1e3      	bne.n	8002534 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe fee4 	bl	800133e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800257e:	b29b      	uxth	r3, r3
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	b29b      	uxth	r3, r3
 8002584:	4619      	mov	r1, r3
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f8ac 	bl	80026e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800258c:	e099      	b.n	80026c2 <HAL_UART_IRQHandler+0x50e>
 800258e:	bf00      	nop
 8002590:	08002837 	.word	0x08002837
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800259c:	b29b      	uxth	r3, r3
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 808b 	beq.w	80026c6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80025b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 8086 	beq.w	80026c6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	330c      	adds	r3, #12
 80025c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c4:	e853 3f00 	ldrex	r3, [r3]
 80025c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80025ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	330c      	adds	r3, #12
 80025da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80025de:	647a      	str	r2, [r7, #68]	; 0x44
 80025e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025e6:	e841 2300 	strex	r3, r2, [r1]
 80025ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80025ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1e3      	bne.n	80025ba <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3314      	adds	r3, #20
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	e853 3f00 	ldrex	r3, [r3]
 8002600:	623b      	str	r3, [r7, #32]
   return(result);
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3314      	adds	r3, #20
 8002612:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002616:	633a      	str	r2, [r7, #48]	; 0x30
 8002618:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800261c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800261e:	e841 2300 	strex	r3, r2, [r1]
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1e3      	bne.n	80025f2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2220      	movs	r2, #32
 800262e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	330c      	adds	r3, #12
 800263e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	e853 3f00 	ldrex	r3, [r3]
 8002646:	60fb      	str	r3, [r7, #12]
   return(result);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f023 0310 	bic.w	r3, r3, #16
 800264e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	330c      	adds	r3, #12
 8002658:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800265c:	61fa      	str	r2, [r7, #28]
 800265e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002660:	69b9      	ldr	r1, [r7, #24]
 8002662:	69fa      	ldr	r2, [r7, #28]
 8002664:	e841 2300 	strex	r3, r2, [r1]
 8002668:	617b      	str	r3, [r7, #20]
   return(result);
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1e3      	bne.n	8002638 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002674:	4619      	mov	r1, r3
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f834 	bl	80026e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800267c:	e023      	b.n	80026c6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800267e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <HAL_UART_IRQHandler+0x4ea>
 800268a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800268e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f8e1 	bl	800285e <UART_Transmit_IT>
    return;
 800269c:	e014      	b.n	80026c8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800269e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00e      	beq.n	80026c8 <HAL_UART_IRQHandler+0x514>
 80026aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d008      	beq.n	80026c8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f921 	bl	80028fe <UART_EndTransmit_IT>
    return;
 80026bc:	e004      	b.n	80026c8 <HAL_UART_IRQHandler+0x514>
    return;
 80026be:	bf00      	nop
 80026c0:	e002      	b.n	80026c8 <HAL_UART_IRQHandler+0x514>
      return;
 80026c2:	bf00      	nop
 80026c4:	e000      	b.n	80026c8 <HAL_UART_IRQHandler+0x514>
      return;
 80026c6:	bf00      	nop
  }
}
 80026c8:	37e8      	adds	r7, #232	; 0xe8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop

080026d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	460b      	mov	r3, r1
 80026ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	4613      	mov	r3, r2
 8002708:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	88fa      	ldrh	r2, [r7, #6]
 8002714:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	88fa      	ldrh	r2, [r7, #6]
 800271a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2222      	movs	r2, #34	; 0x22
 8002726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002740:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695a      	ldr	r2, [r3, #20]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0201 	orr.w	r2, r2, #1
 8002750:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0220 	orr.w	r2, r2, #32
 8002760:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002770:	b480      	push	{r7}
 8002772:	b095      	sub	sp, #84	; 0x54
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	330c      	adds	r3, #12
 800277e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002782:	e853 3f00 	ldrex	r3, [r3]
 8002786:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800278e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	330c      	adds	r3, #12
 8002796:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002798:	643a      	str	r2, [r7, #64]	; 0x40
 800279a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800279e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027a0:	e841 2300 	strex	r3, r2, [r1]
 80027a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80027a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1e5      	bne.n	8002778 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	3314      	adds	r3, #20
 80027b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	e853 3f00 	ldrex	r3, [r3]
 80027ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f023 0301 	bic.w	r3, r3, #1
 80027c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3314      	adds	r3, #20
 80027ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d4:	e841 2300 	strex	r3, r2, [r1]
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1e5      	bne.n	80027ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d119      	bne.n	800281c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	330c      	adds	r3, #12
 80027ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	e853 3f00 	ldrex	r3, [r3]
 80027f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f023 0310 	bic.w	r3, r3, #16
 80027fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	330c      	adds	r3, #12
 8002806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002808:	61ba      	str	r2, [r7, #24]
 800280a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800280c:	6979      	ldr	r1, [r7, #20]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	e841 2300 	strex	r3, r2, [r1]
 8002814:	613b      	str	r3, [r7, #16]
   return(result);
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1e5      	bne.n	80027e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	631a      	str	r2, [r3, #48]	; 0x30
}
 800282a:	bf00      	nop
 800282c:	3754      	adds	r7, #84	; 0x54
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b084      	sub	sp, #16
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002842:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f7ff ff3d 	bl	80026d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002856:	bf00      	nop
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800285e:	b480      	push	{r7}
 8002860:	b085      	sub	sp, #20
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b21      	cmp	r3, #33	; 0x21
 8002870:	d13e      	bne.n	80028f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287a:	d114      	bne.n	80028a6 <UART_Transmit_IT+0x48>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d110      	bne.n	80028a6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002898:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	1c9a      	adds	r2, r3, #2
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	621a      	str	r2, [r3, #32]
 80028a4:	e008      	b.n	80028b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	1c59      	adds	r1, r3, #1
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6211      	str	r1, [r2, #32]
 80028b0:	781a      	ldrb	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	4619      	mov	r1, r3
 80028c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10f      	bne.n	80028ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	e000      	b.n	80028f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80028f0:	2302      	movs	r3, #2
  }
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002914:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fd fed4 	bl	80006cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b08c      	sub	sp, #48	; 0x30
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b22      	cmp	r3, #34	; 0x22
 8002940:	f040 80ab 	bne.w	8002a9a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800294c:	d117      	bne.n	800297e <UART_Receive_IT+0x50>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d113      	bne.n	800297e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002956:	2300      	movs	r3, #0
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	b29b      	uxth	r3, r3
 8002968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800296c:	b29a      	uxth	r2, r3
 800296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002970:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	1c9a      	adds	r2, r3, #2
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	629a      	str	r2, [r3, #40]	; 0x28
 800297c:	e026      	b.n	80029cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002984:	2300      	movs	r3, #0
 8002986:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002990:	d007      	beq.n	80029a2 <UART_Receive_IT+0x74>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10a      	bne.n	80029b0 <UART_Receive_IT+0x82>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ac:	701a      	strb	r2, [r3, #0]
 80029ae:	e008      	b.n	80029c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	4619      	mov	r1, r3
 80029da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d15a      	bne.n	8002a96 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0220 	bic.w	r2, r2, #32
 80029ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0201 	bic.w	r2, r2, #1
 8002a0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d135      	bne.n	8002a8c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	330c      	adds	r3, #12
 8002a2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	e853 3f00 	ldrex	r3, [r3]
 8002a34:	613b      	str	r3, [r7, #16]
   return(result);
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	f023 0310 	bic.w	r3, r3, #16
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	330c      	adds	r3, #12
 8002a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a46:	623a      	str	r2, [r7, #32]
 8002a48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4a:	69f9      	ldr	r1, [r7, #28]
 8002a4c:	6a3a      	ldr	r2, [r7, #32]
 8002a4e:	e841 2300 	strex	r3, r2, [r1]
 8002a52:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1e5      	bne.n	8002a26 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b10      	cmp	r3, #16
 8002a66:	d10a      	bne.n	8002a7e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a82:	4619      	mov	r1, r3
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff fe2d 	bl	80026e4 <HAL_UARTEx_RxEventCallback>
 8002a8a:	e002      	b.n	8002a92 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7fd fdf5 	bl	800067c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002a92:	2300      	movs	r3, #0
 8002a94:	e002      	b.n	8002a9c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002a96:	2300      	movs	r3, #0
 8002a98:	e000      	b.n	8002a9c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002a9a:	2302      	movs	r3, #2
  }
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3730      	adds	r7, #48	; 0x30
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aa8:	b09f      	sub	sp, #124	; 0x7c
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aba:	68d9      	ldr	r1, [r3, #12]
 8002abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	ea40 0301 	orr.w	r3, r0, r1
 8002ac4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ae8:	f021 010c 	bic.w	r1, r1, #12
 8002aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002af2:	430b      	orrs	r3, r1
 8002af4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b02:	6999      	ldr	r1, [r3, #24]
 8002b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	ea40 0301 	orr.w	r3, r0, r1
 8002b0c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	4bc5      	ldr	r3, [pc, #788]	; (8002e28 <UART_SetConfig+0x384>)
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d004      	beq.n	8002b22 <UART_SetConfig+0x7e>
 8002b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	4bc3      	ldr	r3, [pc, #780]	; (8002e2c <UART_SetConfig+0x388>)
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d103      	bne.n	8002b2a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b22:	f7ff fa71 	bl	8002008 <HAL_RCC_GetPCLK2Freq>
 8002b26:	6778      	str	r0, [r7, #116]	; 0x74
 8002b28:	e002      	b.n	8002b30 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b2a:	f7ff fa59 	bl	8001fe0 <HAL_RCC_GetPCLK1Freq>
 8002b2e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b38:	f040 80b6 	bne.w	8002ca8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b3e:	461c      	mov	r4, r3
 8002b40:	f04f 0500 	mov.w	r5, #0
 8002b44:	4622      	mov	r2, r4
 8002b46:	462b      	mov	r3, r5
 8002b48:	1891      	adds	r1, r2, r2
 8002b4a:	6439      	str	r1, [r7, #64]	; 0x40
 8002b4c:	415b      	adcs	r3, r3
 8002b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8002b50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002b54:	1912      	adds	r2, r2, r4
 8002b56:	eb45 0303 	adc.w	r3, r5, r3
 8002b5a:	f04f 0000 	mov.w	r0, #0
 8002b5e:	f04f 0100 	mov.w	r1, #0
 8002b62:	00d9      	lsls	r1, r3, #3
 8002b64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b68:	00d0      	lsls	r0, r2, #3
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	1911      	adds	r1, r2, r4
 8002b70:	6639      	str	r1, [r7, #96]	; 0x60
 8002b72:	416b      	adcs	r3, r5
 8002b74:	667b      	str	r3, [r7, #100]	; 0x64
 8002b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	1891      	adds	r1, r2, r2
 8002b82:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b84:	415b      	adcs	r3, r3
 8002b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b8c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002b90:	f7fd fb8e 	bl	80002b0 <__aeabi_uldivmod>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4ba5      	ldr	r3, [pc, #660]	; (8002e30 <UART_SetConfig+0x38c>)
 8002b9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002b9e:	095b      	lsrs	r3, r3, #5
 8002ba0:	011e      	lsls	r6, r3, #4
 8002ba2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ba4:	461c      	mov	r4, r3
 8002ba6:	f04f 0500 	mov.w	r5, #0
 8002baa:	4622      	mov	r2, r4
 8002bac:	462b      	mov	r3, r5
 8002bae:	1891      	adds	r1, r2, r2
 8002bb0:	6339      	str	r1, [r7, #48]	; 0x30
 8002bb2:	415b      	adcs	r3, r3
 8002bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8002bb6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002bba:	1912      	adds	r2, r2, r4
 8002bbc:	eb45 0303 	adc.w	r3, r5, r3
 8002bc0:	f04f 0000 	mov.w	r0, #0
 8002bc4:	f04f 0100 	mov.w	r1, #0
 8002bc8:	00d9      	lsls	r1, r3, #3
 8002bca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bce:	00d0      	lsls	r0, r2, #3
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	1911      	adds	r1, r2, r4
 8002bd6:	65b9      	str	r1, [r7, #88]	; 0x58
 8002bd8:	416b      	adcs	r3, r5
 8002bda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	461a      	mov	r2, r3
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	1891      	adds	r1, r2, r2
 8002be8:	62b9      	str	r1, [r7, #40]	; 0x28
 8002bea:	415b      	adcs	r3, r3
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bf2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002bf6:	f7fd fb5b 	bl	80002b0 <__aeabi_uldivmod>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4b8c      	ldr	r3, [pc, #560]	; (8002e30 <UART_SetConfig+0x38c>)
 8002c00:	fba3 1302 	umull	r1, r3, r3, r2
 8002c04:	095b      	lsrs	r3, r3, #5
 8002c06:	2164      	movs	r1, #100	; 0x64
 8002c08:	fb01 f303 	mul.w	r3, r1, r3
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	3332      	adds	r3, #50	; 0x32
 8002c12:	4a87      	ldr	r2, [pc, #540]	; (8002e30 <UART_SetConfig+0x38c>)
 8002c14:	fba2 2303 	umull	r2, r3, r2, r3
 8002c18:	095b      	lsrs	r3, r3, #5
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c20:	441e      	add	r6, r3
 8002c22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c24:	4618      	mov	r0, r3
 8002c26:	f04f 0100 	mov.w	r1, #0
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	1894      	adds	r4, r2, r2
 8002c30:	623c      	str	r4, [r7, #32]
 8002c32:	415b      	adcs	r3, r3
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
 8002c36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c3a:	1812      	adds	r2, r2, r0
 8002c3c:	eb41 0303 	adc.w	r3, r1, r3
 8002c40:	f04f 0400 	mov.w	r4, #0
 8002c44:	f04f 0500 	mov.w	r5, #0
 8002c48:	00dd      	lsls	r5, r3, #3
 8002c4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002c4e:	00d4      	lsls	r4, r2, #3
 8002c50:	4622      	mov	r2, r4
 8002c52:	462b      	mov	r3, r5
 8002c54:	1814      	adds	r4, r2, r0
 8002c56:	653c      	str	r4, [r7, #80]	; 0x50
 8002c58:	414b      	adcs	r3, r1
 8002c5a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	461a      	mov	r2, r3
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	1891      	adds	r1, r2, r2
 8002c68:	61b9      	str	r1, [r7, #24]
 8002c6a:	415b      	adcs	r3, r3
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002c76:	f7fd fb1b 	bl	80002b0 <__aeabi_uldivmod>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4b6c      	ldr	r3, [pc, #432]	; (8002e30 <UART_SetConfig+0x38c>)
 8002c80:	fba3 1302 	umull	r1, r3, r3, r2
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	2164      	movs	r1, #100	; 0x64
 8002c88:	fb01 f303 	mul.w	r3, r1, r3
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	3332      	adds	r3, #50	; 0x32
 8002c92:	4a67      	ldr	r2, [pc, #412]	; (8002e30 <UART_SetConfig+0x38c>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	095b      	lsrs	r3, r3, #5
 8002c9a:	f003 0207 	and.w	r2, r3, #7
 8002c9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4432      	add	r2, r6
 8002ca4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ca6:	e0b9      	b.n	8002e1c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ca8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002caa:	461c      	mov	r4, r3
 8002cac:	f04f 0500 	mov.w	r5, #0
 8002cb0:	4622      	mov	r2, r4
 8002cb2:	462b      	mov	r3, r5
 8002cb4:	1891      	adds	r1, r2, r2
 8002cb6:	6139      	str	r1, [r7, #16]
 8002cb8:	415b      	adcs	r3, r3
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cc0:	1912      	adds	r2, r2, r4
 8002cc2:	eb45 0303 	adc.w	r3, r5, r3
 8002cc6:	f04f 0000 	mov.w	r0, #0
 8002cca:	f04f 0100 	mov.w	r1, #0
 8002cce:	00d9      	lsls	r1, r3, #3
 8002cd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cd4:	00d0      	lsls	r0, r2, #3
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	eb12 0804 	adds.w	r8, r2, r4
 8002cde:	eb43 0905 	adc.w	r9, r3, r5
 8002ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f04f 0100 	mov.w	r1, #0
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	008b      	lsls	r3, r1, #2
 8002cf6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002cfa:	0082      	lsls	r2, r0, #2
 8002cfc:	4640      	mov	r0, r8
 8002cfe:	4649      	mov	r1, r9
 8002d00:	f7fd fad6 	bl	80002b0 <__aeabi_uldivmod>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4b49      	ldr	r3, [pc, #292]	; (8002e30 <UART_SetConfig+0x38c>)
 8002d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8002d0e:	095b      	lsrs	r3, r3, #5
 8002d10:	011e      	lsls	r6, r3, #4
 8002d12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d14:	4618      	mov	r0, r3
 8002d16:	f04f 0100 	mov.w	r1, #0
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	1894      	adds	r4, r2, r2
 8002d20:	60bc      	str	r4, [r7, #8]
 8002d22:	415b      	adcs	r3, r3
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d2a:	1812      	adds	r2, r2, r0
 8002d2c:	eb41 0303 	adc.w	r3, r1, r3
 8002d30:	f04f 0400 	mov.w	r4, #0
 8002d34:	f04f 0500 	mov.w	r5, #0
 8002d38:	00dd      	lsls	r5, r3, #3
 8002d3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002d3e:	00d4      	lsls	r4, r2, #3
 8002d40:	4622      	mov	r2, r4
 8002d42:	462b      	mov	r3, r5
 8002d44:	1814      	adds	r4, r2, r0
 8002d46:	64bc      	str	r4, [r7, #72]	; 0x48
 8002d48:	414b      	adcs	r3, r1
 8002d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f04f 0100 	mov.w	r1, #0
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	f04f 0300 	mov.w	r3, #0
 8002d5e:	008b      	lsls	r3, r1, #2
 8002d60:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002d64:	0082      	lsls	r2, r0, #2
 8002d66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002d6a:	f7fd faa1 	bl	80002b0 <__aeabi_uldivmod>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4b2f      	ldr	r3, [pc, #188]	; (8002e30 <UART_SetConfig+0x38c>)
 8002d74:	fba3 1302 	umull	r1, r3, r3, r2
 8002d78:	095b      	lsrs	r3, r3, #5
 8002d7a:	2164      	movs	r1, #100	; 0x64
 8002d7c:	fb01 f303 	mul.w	r3, r1, r3
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	3332      	adds	r3, #50	; 0x32
 8002d86:	4a2a      	ldr	r2, [pc, #168]	; (8002e30 <UART_SetConfig+0x38c>)
 8002d88:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d92:	441e      	add	r6, r3
 8002d94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d96:	4618      	mov	r0, r3
 8002d98:	f04f 0100 	mov.w	r1, #0
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	1894      	adds	r4, r2, r2
 8002da2:	603c      	str	r4, [r7, #0]
 8002da4:	415b      	adcs	r3, r3
 8002da6:	607b      	str	r3, [r7, #4]
 8002da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dac:	1812      	adds	r2, r2, r0
 8002dae:	eb41 0303 	adc.w	r3, r1, r3
 8002db2:	f04f 0400 	mov.w	r4, #0
 8002db6:	f04f 0500 	mov.w	r5, #0
 8002dba:	00dd      	lsls	r5, r3, #3
 8002dbc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002dc0:	00d4      	lsls	r4, r2, #3
 8002dc2:	4622      	mov	r2, r4
 8002dc4:	462b      	mov	r3, r5
 8002dc6:	eb12 0a00 	adds.w	sl, r2, r0
 8002dca:	eb43 0b01 	adc.w	fp, r3, r1
 8002dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f04f 0100 	mov.w	r1, #0
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	008b      	lsls	r3, r1, #2
 8002de2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002de6:	0082      	lsls	r2, r0, #2
 8002de8:	4650      	mov	r0, sl
 8002dea:	4659      	mov	r1, fp
 8002dec:	f7fd fa60 	bl	80002b0 <__aeabi_uldivmod>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4b0e      	ldr	r3, [pc, #56]	; (8002e30 <UART_SetConfig+0x38c>)
 8002df6:	fba3 1302 	umull	r1, r3, r3, r2
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	2164      	movs	r1, #100	; 0x64
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	3332      	adds	r3, #50	; 0x32
 8002e08:	4a09      	ldr	r2, [pc, #36]	; (8002e30 <UART_SetConfig+0x38c>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	095b      	lsrs	r3, r3, #5
 8002e10:	f003 020f 	and.w	r2, r3, #15
 8002e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4432      	add	r2, r6
 8002e1a:	609a      	str	r2, [r3, #8]
}
 8002e1c:	bf00      	nop
 8002e1e:	377c      	adds	r7, #124	; 0x7c
 8002e20:	46bd      	mov	sp, r7
 8002e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e26:	bf00      	nop
 8002e28:	40011000 	.word	0x40011000
 8002e2c:	40011400 	.word	0x40011400
 8002e30:	51eb851f 	.word	0x51eb851f

08002e34 <__errno>:
 8002e34:	4b01      	ldr	r3, [pc, #4]	; (8002e3c <__errno+0x8>)
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	2000000c 	.word	0x2000000c

08002e40 <__libc_init_array>:
 8002e40:	b570      	push	{r4, r5, r6, lr}
 8002e42:	4d0d      	ldr	r5, [pc, #52]	; (8002e78 <__libc_init_array+0x38>)
 8002e44:	4c0d      	ldr	r4, [pc, #52]	; (8002e7c <__libc_init_array+0x3c>)
 8002e46:	1b64      	subs	r4, r4, r5
 8002e48:	10a4      	asrs	r4, r4, #2
 8002e4a:	2600      	movs	r6, #0
 8002e4c:	42a6      	cmp	r6, r4
 8002e4e:	d109      	bne.n	8002e64 <__libc_init_array+0x24>
 8002e50:	4d0b      	ldr	r5, [pc, #44]	; (8002e80 <__libc_init_array+0x40>)
 8002e52:	4c0c      	ldr	r4, [pc, #48]	; (8002e84 <__libc_init_array+0x44>)
 8002e54:	f000 fc7e 	bl	8003754 <_init>
 8002e58:	1b64      	subs	r4, r4, r5
 8002e5a:	10a4      	asrs	r4, r4, #2
 8002e5c:	2600      	movs	r6, #0
 8002e5e:	42a6      	cmp	r6, r4
 8002e60:	d105      	bne.n	8002e6e <__libc_init_array+0x2e>
 8002e62:	bd70      	pop	{r4, r5, r6, pc}
 8002e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e68:	4798      	blx	r3
 8002e6a:	3601      	adds	r6, #1
 8002e6c:	e7ee      	b.n	8002e4c <__libc_init_array+0xc>
 8002e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e72:	4798      	blx	r3
 8002e74:	3601      	adds	r6, #1
 8002e76:	e7f2      	b.n	8002e5e <__libc_init_array+0x1e>
 8002e78:	08003824 	.word	0x08003824
 8002e7c:	08003824 	.word	0x08003824
 8002e80:	08003824 	.word	0x08003824
 8002e84:	08003828 	.word	0x08003828

08002e88 <memcpy>:
 8002e88:	440a      	add	r2, r1
 8002e8a:	4291      	cmp	r1, r2
 8002e8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002e90:	d100      	bne.n	8002e94 <memcpy+0xc>
 8002e92:	4770      	bx	lr
 8002e94:	b510      	push	{r4, lr}
 8002e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e9e:	4291      	cmp	r1, r2
 8002ea0:	d1f9      	bne.n	8002e96 <memcpy+0xe>
 8002ea2:	bd10      	pop	{r4, pc}

08002ea4 <memset>:
 8002ea4:	4402      	add	r2, r0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d100      	bne.n	8002eae <memset+0xa>
 8002eac:	4770      	bx	lr
 8002eae:	f803 1b01 	strb.w	r1, [r3], #1
 8002eb2:	e7f9      	b.n	8002ea8 <memset+0x4>

08002eb4 <siprintf>:
 8002eb4:	b40e      	push	{r1, r2, r3}
 8002eb6:	b500      	push	{lr}
 8002eb8:	b09c      	sub	sp, #112	; 0x70
 8002eba:	ab1d      	add	r3, sp, #116	; 0x74
 8002ebc:	9002      	str	r0, [sp, #8]
 8002ebe:	9006      	str	r0, [sp, #24]
 8002ec0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ec4:	4809      	ldr	r0, [pc, #36]	; (8002eec <siprintf+0x38>)
 8002ec6:	9107      	str	r1, [sp, #28]
 8002ec8:	9104      	str	r1, [sp, #16]
 8002eca:	4909      	ldr	r1, [pc, #36]	; (8002ef0 <siprintf+0x3c>)
 8002ecc:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ed0:	9105      	str	r1, [sp, #20]
 8002ed2:	6800      	ldr	r0, [r0, #0]
 8002ed4:	9301      	str	r3, [sp, #4]
 8002ed6:	a902      	add	r1, sp, #8
 8002ed8:	f000 f898 	bl	800300c <_svfiprintf_r>
 8002edc:	9b02      	ldr	r3, [sp, #8]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	b01c      	add	sp, #112	; 0x70
 8002ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ee8:	b003      	add	sp, #12
 8002eea:	4770      	bx	lr
 8002eec:	2000000c 	.word	0x2000000c
 8002ef0:	ffff0208 	.word	0xffff0208

08002ef4 <strcat>:
 8002ef4:	b510      	push	{r4, lr}
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	7814      	ldrb	r4, [r2, #0]
 8002efa:	4613      	mov	r3, r2
 8002efc:	3201      	adds	r2, #1
 8002efe:	2c00      	cmp	r4, #0
 8002f00:	d1fa      	bne.n	8002ef8 <strcat+0x4>
 8002f02:	3b01      	subs	r3, #1
 8002f04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f08:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f0c:	2a00      	cmp	r2, #0
 8002f0e:	d1f9      	bne.n	8002f04 <strcat+0x10>
 8002f10:	bd10      	pop	{r4, pc}
	...

08002f14 <_vsiprintf_r>:
 8002f14:	b500      	push	{lr}
 8002f16:	b09b      	sub	sp, #108	; 0x6c
 8002f18:	9100      	str	r1, [sp, #0]
 8002f1a:	9104      	str	r1, [sp, #16]
 8002f1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002f20:	9105      	str	r1, [sp, #20]
 8002f22:	9102      	str	r1, [sp, #8]
 8002f24:	4905      	ldr	r1, [pc, #20]	; (8002f3c <_vsiprintf_r+0x28>)
 8002f26:	9103      	str	r1, [sp, #12]
 8002f28:	4669      	mov	r1, sp
 8002f2a:	f000 f86f 	bl	800300c <_svfiprintf_r>
 8002f2e:	9b00      	ldr	r3, [sp, #0]
 8002f30:	2200      	movs	r2, #0
 8002f32:	701a      	strb	r2, [r3, #0]
 8002f34:	b01b      	add	sp, #108	; 0x6c
 8002f36:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f3a:	bf00      	nop
 8002f3c:	ffff0208 	.word	0xffff0208

08002f40 <vsiprintf>:
 8002f40:	4613      	mov	r3, r2
 8002f42:	460a      	mov	r2, r1
 8002f44:	4601      	mov	r1, r0
 8002f46:	4802      	ldr	r0, [pc, #8]	; (8002f50 <vsiprintf+0x10>)
 8002f48:	6800      	ldr	r0, [r0, #0]
 8002f4a:	f7ff bfe3 	b.w	8002f14 <_vsiprintf_r>
 8002f4e:	bf00      	nop
 8002f50:	2000000c 	.word	0x2000000c

08002f54 <__ssputs_r>:
 8002f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f58:	688e      	ldr	r6, [r1, #8]
 8002f5a:	429e      	cmp	r6, r3
 8002f5c:	4682      	mov	sl, r0
 8002f5e:	460c      	mov	r4, r1
 8002f60:	4690      	mov	r8, r2
 8002f62:	461f      	mov	r7, r3
 8002f64:	d838      	bhi.n	8002fd8 <__ssputs_r+0x84>
 8002f66:	898a      	ldrh	r2, [r1, #12]
 8002f68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f6c:	d032      	beq.n	8002fd4 <__ssputs_r+0x80>
 8002f6e:	6825      	ldr	r5, [r4, #0]
 8002f70:	6909      	ldr	r1, [r1, #16]
 8002f72:	eba5 0901 	sub.w	r9, r5, r1
 8002f76:	6965      	ldr	r5, [r4, #20]
 8002f78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f80:	3301      	adds	r3, #1
 8002f82:	444b      	add	r3, r9
 8002f84:	106d      	asrs	r5, r5, #1
 8002f86:	429d      	cmp	r5, r3
 8002f88:	bf38      	it	cc
 8002f8a:	461d      	movcc	r5, r3
 8002f8c:	0553      	lsls	r3, r2, #21
 8002f8e:	d531      	bpl.n	8002ff4 <__ssputs_r+0xa0>
 8002f90:	4629      	mov	r1, r5
 8002f92:	f000 fb39 	bl	8003608 <_malloc_r>
 8002f96:	4606      	mov	r6, r0
 8002f98:	b950      	cbnz	r0, 8002fb0 <__ssputs_r+0x5c>
 8002f9a:	230c      	movs	r3, #12
 8002f9c:	f8ca 3000 	str.w	r3, [sl]
 8002fa0:	89a3      	ldrh	r3, [r4, #12]
 8002fa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fa6:	81a3      	strh	r3, [r4, #12]
 8002fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fb0:	6921      	ldr	r1, [r4, #16]
 8002fb2:	464a      	mov	r2, r9
 8002fb4:	f7ff ff68 	bl	8002e88 <memcpy>
 8002fb8:	89a3      	ldrh	r3, [r4, #12]
 8002fba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc2:	81a3      	strh	r3, [r4, #12]
 8002fc4:	6126      	str	r6, [r4, #16]
 8002fc6:	6165      	str	r5, [r4, #20]
 8002fc8:	444e      	add	r6, r9
 8002fca:	eba5 0509 	sub.w	r5, r5, r9
 8002fce:	6026      	str	r6, [r4, #0]
 8002fd0:	60a5      	str	r5, [r4, #8]
 8002fd2:	463e      	mov	r6, r7
 8002fd4:	42be      	cmp	r6, r7
 8002fd6:	d900      	bls.n	8002fda <__ssputs_r+0x86>
 8002fd8:	463e      	mov	r6, r7
 8002fda:	4632      	mov	r2, r6
 8002fdc:	6820      	ldr	r0, [r4, #0]
 8002fde:	4641      	mov	r1, r8
 8002fe0:	f000 faa8 	bl	8003534 <memmove>
 8002fe4:	68a3      	ldr	r3, [r4, #8]
 8002fe6:	6822      	ldr	r2, [r4, #0]
 8002fe8:	1b9b      	subs	r3, r3, r6
 8002fea:	4432      	add	r2, r6
 8002fec:	60a3      	str	r3, [r4, #8]
 8002fee:	6022      	str	r2, [r4, #0]
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	e7db      	b.n	8002fac <__ssputs_r+0x58>
 8002ff4:	462a      	mov	r2, r5
 8002ff6:	f000 fb61 	bl	80036bc <_realloc_r>
 8002ffa:	4606      	mov	r6, r0
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	d1e1      	bne.n	8002fc4 <__ssputs_r+0x70>
 8003000:	6921      	ldr	r1, [r4, #16]
 8003002:	4650      	mov	r0, sl
 8003004:	f000 fab0 	bl	8003568 <_free_r>
 8003008:	e7c7      	b.n	8002f9a <__ssputs_r+0x46>
	...

0800300c <_svfiprintf_r>:
 800300c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003010:	4698      	mov	r8, r3
 8003012:	898b      	ldrh	r3, [r1, #12]
 8003014:	061b      	lsls	r3, r3, #24
 8003016:	b09d      	sub	sp, #116	; 0x74
 8003018:	4607      	mov	r7, r0
 800301a:	460d      	mov	r5, r1
 800301c:	4614      	mov	r4, r2
 800301e:	d50e      	bpl.n	800303e <_svfiprintf_r+0x32>
 8003020:	690b      	ldr	r3, [r1, #16]
 8003022:	b963      	cbnz	r3, 800303e <_svfiprintf_r+0x32>
 8003024:	2140      	movs	r1, #64	; 0x40
 8003026:	f000 faef 	bl	8003608 <_malloc_r>
 800302a:	6028      	str	r0, [r5, #0]
 800302c:	6128      	str	r0, [r5, #16]
 800302e:	b920      	cbnz	r0, 800303a <_svfiprintf_r+0x2e>
 8003030:	230c      	movs	r3, #12
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	f04f 30ff 	mov.w	r0, #4294967295
 8003038:	e0d1      	b.n	80031de <_svfiprintf_r+0x1d2>
 800303a:	2340      	movs	r3, #64	; 0x40
 800303c:	616b      	str	r3, [r5, #20]
 800303e:	2300      	movs	r3, #0
 8003040:	9309      	str	r3, [sp, #36]	; 0x24
 8003042:	2320      	movs	r3, #32
 8003044:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003048:	f8cd 800c 	str.w	r8, [sp, #12]
 800304c:	2330      	movs	r3, #48	; 0x30
 800304e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80031f8 <_svfiprintf_r+0x1ec>
 8003052:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003056:	f04f 0901 	mov.w	r9, #1
 800305a:	4623      	mov	r3, r4
 800305c:	469a      	mov	sl, r3
 800305e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003062:	b10a      	cbz	r2, 8003068 <_svfiprintf_r+0x5c>
 8003064:	2a25      	cmp	r2, #37	; 0x25
 8003066:	d1f9      	bne.n	800305c <_svfiprintf_r+0x50>
 8003068:	ebba 0b04 	subs.w	fp, sl, r4
 800306c:	d00b      	beq.n	8003086 <_svfiprintf_r+0x7a>
 800306e:	465b      	mov	r3, fp
 8003070:	4622      	mov	r2, r4
 8003072:	4629      	mov	r1, r5
 8003074:	4638      	mov	r0, r7
 8003076:	f7ff ff6d 	bl	8002f54 <__ssputs_r>
 800307a:	3001      	adds	r0, #1
 800307c:	f000 80aa 	beq.w	80031d4 <_svfiprintf_r+0x1c8>
 8003080:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003082:	445a      	add	r2, fp
 8003084:	9209      	str	r2, [sp, #36]	; 0x24
 8003086:	f89a 3000 	ldrb.w	r3, [sl]
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 80a2 	beq.w	80031d4 <_svfiprintf_r+0x1c8>
 8003090:	2300      	movs	r3, #0
 8003092:	f04f 32ff 	mov.w	r2, #4294967295
 8003096:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800309a:	f10a 0a01 	add.w	sl, sl, #1
 800309e:	9304      	str	r3, [sp, #16]
 80030a0:	9307      	str	r3, [sp, #28]
 80030a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030a6:	931a      	str	r3, [sp, #104]	; 0x68
 80030a8:	4654      	mov	r4, sl
 80030aa:	2205      	movs	r2, #5
 80030ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030b0:	4851      	ldr	r0, [pc, #324]	; (80031f8 <_svfiprintf_r+0x1ec>)
 80030b2:	f7fd f8ad 	bl	8000210 <memchr>
 80030b6:	9a04      	ldr	r2, [sp, #16]
 80030b8:	b9d8      	cbnz	r0, 80030f2 <_svfiprintf_r+0xe6>
 80030ba:	06d0      	lsls	r0, r2, #27
 80030bc:	bf44      	itt	mi
 80030be:	2320      	movmi	r3, #32
 80030c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030c4:	0711      	lsls	r1, r2, #28
 80030c6:	bf44      	itt	mi
 80030c8:	232b      	movmi	r3, #43	; 0x2b
 80030ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030ce:	f89a 3000 	ldrb.w	r3, [sl]
 80030d2:	2b2a      	cmp	r3, #42	; 0x2a
 80030d4:	d015      	beq.n	8003102 <_svfiprintf_r+0xf6>
 80030d6:	9a07      	ldr	r2, [sp, #28]
 80030d8:	4654      	mov	r4, sl
 80030da:	2000      	movs	r0, #0
 80030dc:	f04f 0c0a 	mov.w	ip, #10
 80030e0:	4621      	mov	r1, r4
 80030e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030e6:	3b30      	subs	r3, #48	; 0x30
 80030e8:	2b09      	cmp	r3, #9
 80030ea:	d94e      	bls.n	800318a <_svfiprintf_r+0x17e>
 80030ec:	b1b0      	cbz	r0, 800311c <_svfiprintf_r+0x110>
 80030ee:	9207      	str	r2, [sp, #28]
 80030f0:	e014      	b.n	800311c <_svfiprintf_r+0x110>
 80030f2:	eba0 0308 	sub.w	r3, r0, r8
 80030f6:	fa09 f303 	lsl.w	r3, r9, r3
 80030fa:	4313      	orrs	r3, r2
 80030fc:	9304      	str	r3, [sp, #16]
 80030fe:	46a2      	mov	sl, r4
 8003100:	e7d2      	b.n	80030a8 <_svfiprintf_r+0x9c>
 8003102:	9b03      	ldr	r3, [sp, #12]
 8003104:	1d19      	adds	r1, r3, #4
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	9103      	str	r1, [sp, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	bfbb      	ittet	lt
 800310e:	425b      	neglt	r3, r3
 8003110:	f042 0202 	orrlt.w	r2, r2, #2
 8003114:	9307      	strge	r3, [sp, #28]
 8003116:	9307      	strlt	r3, [sp, #28]
 8003118:	bfb8      	it	lt
 800311a:	9204      	strlt	r2, [sp, #16]
 800311c:	7823      	ldrb	r3, [r4, #0]
 800311e:	2b2e      	cmp	r3, #46	; 0x2e
 8003120:	d10c      	bne.n	800313c <_svfiprintf_r+0x130>
 8003122:	7863      	ldrb	r3, [r4, #1]
 8003124:	2b2a      	cmp	r3, #42	; 0x2a
 8003126:	d135      	bne.n	8003194 <_svfiprintf_r+0x188>
 8003128:	9b03      	ldr	r3, [sp, #12]
 800312a:	1d1a      	adds	r2, r3, #4
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	9203      	str	r2, [sp, #12]
 8003130:	2b00      	cmp	r3, #0
 8003132:	bfb8      	it	lt
 8003134:	f04f 33ff 	movlt.w	r3, #4294967295
 8003138:	3402      	adds	r4, #2
 800313a:	9305      	str	r3, [sp, #20]
 800313c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003208 <_svfiprintf_r+0x1fc>
 8003140:	7821      	ldrb	r1, [r4, #0]
 8003142:	2203      	movs	r2, #3
 8003144:	4650      	mov	r0, sl
 8003146:	f7fd f863 	bl	8000210 <memchr>
 800314a:	b140      	cbz	r0, 800315e <_svfiprintf_r+0x152>
 800314c:	2340      	movs	r3, #64	; 0x40
 800314e:	eba0 000a 	sub.w	r0, r0, sl
 8003152:	fa03 f000 	lsl.w	r0, r3, r0
 8003156:	9b04      	ldr	r3, [sp, #16]
 8003158:	4303      	orrs	r3, r0
 800315a:	3401      	adds	r4, #1
 800315c:	9304      	str	r3, [sp, #16]
 800315e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003162:	4826      	ldr	r0, [pc, #152]	; (80031fc <_svfiprintf_r+0x1f0>)
 8003164:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003168:	2206      	movs	r2, #6
 800316a:	f7fd f851 	bl	8000210 <memchr>
 800316e:	2800      	cmp	r0, #0
 8003170:	d038      	beq.n	80031e4 <_svfiprintf_r+0x1d8>
 8003172:	4b23      	ldr	r3, [pc, #140]	; (8003200 <_svfiprintf_r+0x1f4>)
 8003174:	bb1b      	cbnz	r3, 80031be <_svfiprintf_r+0x1b2>
 8003176:	9b03      	ldr	r3, [sp, #12]
 8003178:	3307      	adds	r3, #7
 800317a:	f023 0307 	bic.w	r3, r3, #7
 800317e:	3308      	adds	r3, #8
 8003180:	9303      	str	r3, [sp, #12]
 8003182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003184:	4433      	add	r3, r6
 8003186:	9309      	str	r3, [sp, #36]	; 0x24
 8003188:	e767      	b.n	800305a <_svfiprintf_r+0x4e>
 800318a:	fb0c 3202 	mla	r2, ip, r2, r3
 800318e:	460c      	mov	r4, r1
 8003190:	2001      	movs	r0, #1
 8003192:	e7a5      	b.n	80030e0 <_svfiprintf_r+0xd4>
 8003194:	2300      	movs	r3, #0
 8003196:	3401      	adds	r4, #1
 8003198:	9305      	str	r3, [sp, #20]
 800319a:	4619      	mov	r1, r3
 800319c:	f04f 0c0a 	mov.w	ip, #10
 80031a0:	4620      	mov	r0, r4
 80031a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031a6:	3a30      	subs	r2, #48	; 0x30
 80031a8:	2a09      	cmp	r2, #9
 80031aa:	d903      	bls.n	80031b4 <_svfiprintf_r+0x1a8>
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0c5      	beq.n	800313c <_svfiprintf_r+0x130>
 80031b0:	9105      	str	r1, [sp, #20]
 80031b2:	e7c3      	b.n	800313c <_svfiprintf_r+0x130>
 80031b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80031b8:	4604      	mov	r4, r0
 80031ba:	2301      	movs	r3, #1
 80031bc:	e7f0      	b.n	80031a0 <_svfiprintf_r+0x194>
 80031be:	ab03      	add	r3, sp, #12
 80031c0:	9300      	str	r3, [sp, #0]
 80031c2:	462a      	mov	r2, r5
 80031c4:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <_svfiprintf_r+0x1f8>)
 80031c6:	a904      	add	r1, sp, #16
 80031c8:	4638      	mov	r0, r7
 80031ca:	f3af 8000 	nop.w
 80031ce:	1c42      	adds	r2, r0, #1
 80031d0:	4606      	mov	r6, r0
 80031d2:	d1d6      	bne.n	8003182 <_svfiprintf_r+0x176>
 80031d4:	89ab      	ldrh	r3, [r5, #12]
 80031d6:	065b      	lsls	r3, r3, #25
 80031d8:	f53f af2c 	bmi.w	8003034 <_svfiprintf_r+0x28>
 80031dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031de:	b01d      	add	sp, #116	; 0x74
 80031e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031e4:	ab03      	add	r3, sp, #12
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	462a      	mov	r2, r5
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <_svfiprintf_r+0x1f8>)
 80031ec:	a904      	add	r1, sp, #16
 80031ee:	4638      	mov	r0, r7
 80031f0:	f000 f87a 	bl	80032e8 <_printf_i>
 80031f4:	e7eb      	b.n	80031ce <_svfiprintf_r+0x1c2>
 80031f6:	bf00      	nop
 80031f8:	080037e8 	.word	0x080037e8
 80031fc:	080037f2 	.word	0x080037f2
 8003200:	00000000 	.word	0x00000000
 8003204:	08002f55 	.word	0x08002f55
 8003208:	080037ee 	.word	0x080037ee

0800320c <_printf_common>:
 800320c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003210:	4616      	mov	r6, r2
 8003212:	4699      	mov	r9, r3
 8003214:	688a      	ldr	r2, [r1, #8]
 8003216:	690b      	ldr	r3, [r1, #16]
 8003218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800321c:	4293      	cmp	r3, r2
 800321e:	bfb8      	it	lt
 8003220:	4613      	movlt	r3, r2
 8003222:	6033      	str	r3, [r6, #0]
 8003224:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003228:	4607      	mov	r7, r0
 800322a:	460c      	mov	r4, r1
 800322c:	b10a      	cbz	r2, 8003232 <_printf_common+0x26>
 800322e:	3301      	adds	r3, #1
 8003230:	6033      	str	r3, [r6, #0]
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	0699      	lsls	r1, r3, #26
 8003236:	bf42      	ittt	mi
 8003238:	6833      	ldrmi	r3, [r6, #0]
 800323a:	3302      	addmi	r3, #2
 800323c:	6033      	strmi	r3, [r6, #0]
 800323e:	6825      	ldr	r5, [r4, #0]
 8003240:	f015 0506 	ands.w	r5, r5, #6
 8003244:	d106      	bne.n	8003254 <_printf_common+0x48>
 8003246:	f104 0a19 	add.w	sl, r4, #25
 800324a:	68e3      	ldr	r3, [r4, #12]
 800324c:	6832      	ldr	r2, [r6, #0]
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	42ab      	cmp	r3, r5
 8003252:	dc26      	bgt.n	80032a2 <_printf_common+0x96>
 8003254:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003258:	1e13      	subs	r3, r2, #0
 800325a:	6822      	ldr	r2, [r4, #0]
 800325c:	bf18      	it	ne
 800325e:	2301      	movne	r3, #1
 8003260:	0692      	lsls	r2, r2, #26
 8003262:	d42b      	bmi.n	80032bc <_printf_common+0xb0>
 8003264:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003268:	4649      	mov	r1, r9
 800326a:	4638      	mov	r0, r7
 800326c:	47c0      	blx	r8
 800326e:	3001      	adds	r0, #1
 8003270:	d01e      	beq.n	80032b0 <_printf_common+0xa4>
 8003272:	6823      	ldr	r3, [r4, #0]
 8003274:	68e5      	ldr	r5, [r4, #12]
 8003276:	6832      	ldr	r2, [r6, #0]
 8003278:	f003 0306 	and.w	r3, r3, #6
 800327c:	2b04      	cmp	r3, #4
 800327e:	bf08      	it	eq
 8003280:	1aad      	subeq	r5, r5, r2
 8003282:	68a3      	ldr	r3, [r4, #8]
 8003284:	6922      	ldr	r2, [r4, #16]
 8003286:	bf0c      	ite	eq
 8003288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800328c:	2500      	movne	r5, #0
 800328e:	4293      	cmp	r3, r2
 8003290:	bfc4      	itt	gt
 8003292:	1a9b      	subgt	r3, r3, r2
 8003294:	18ed      	addgt	r5, r5, r3
 8003296:	2600      	movs	r6, #0
 8003298:	341a      	adds	r4, #26
 800329a:	42b5      	cmp	r5, r6
 800329c:	d11a      	bne.n	80032d4 <_printf_common+0xc8>
 800329e:	2000      	movs	r0, #0
 80032a0:	e008      	b.n	80032b4 <_printf_common+0xa8>
 80032a2:	2301      	movs	r3, #1
 80032a4:	4652      	mov	r2, sl
 80032a6:	4649      	mov	r1, r9
 80032a8:	4638      	mov	r0, r7
 80032aa:	47c0      	blx	r8
 80032ac:	3001      	adds	r0, #1
 80032ae:	d103      	bne.n	80032b8 <_printf_common+0xac>
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032b8:	3501      	adds	r5, #1
 80032ba:	e7c6      	b.n	800324a <_printf_common+0x3e>
 80032bc:	18e1      	adds	r1, r4, r3
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	2030      	movs	r0, #48	; 0x30
 80032c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032c6:	4422      	add	r2, r4
 80032c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032d0:	3302      	adds	r3, #2
 80032d2:	e7c7      	b.n	8003264 <_printf_common+0x58>
 80032d4:	2301      	movs	r3, #1
 80032d6:	4622      	mov	r2, r4
 80032d8:	4649      	mov	r1, r9
 80032da:	4638      	mov	r0, r7
 80032dc:	47c0      	blx	r8
 80032de:	3001      	adds	r0, #1
 80032e0:	d0e6      	beq.n	80032b0 <_printf_common+0xa4>
 80032e2:	3601      	adds	r6, #1
 80032e4:	e7d9      	b.n	800329a <_printf_common+0x8e>
	...

080032e8 <_printf_i>:
 80032e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032ec:	460c      	mov	r4, r1
 80032ee:	4691      	mov	r9, r2
 80032f0:	7e27      	ldrb	r7, [r4, #24]
 80032f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80032f4:	2f78      	cmp	r7, #120	; 0x78
 80032f6:	4680      	mov	r8, r0
 80032f8:	469a      	mov	sl, r3
 80032fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032fe:	d807      	bhi.n	8003310 <_printf_i+0x28>
 8003300:	2f62      	cmp	r7, #98	; 0x62
 8003302:	d80a      	bhi.n	800331a <_printf_i+0x32>
 8003304:	2f00      	cmp	r7, #0
 8003306:	f000 80d8 	beq.w	80034ba <_printf_i+0x1d2>
 800330a:	2f58      	cmp	r7, #88	; 0x58
 800330c:	f000 80a3 	beq.w	8003456 <_printf_i+0x16e>
 8003310:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003318:	e03a      	b.n	8003390 <_printf_i+0xa8>
 800331a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800331e:	2b15      	cmp	r3, #21
 8003320:	d8f6      	bhi.n	8003310 <_printf_i+0x28>
 8003322:	a001      	add	r0, pc, #4	; (adr r0, 8003328 <_printf_i+0x40>)
 8003324:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003328:	08003381 	.word	0x08003381
 800332c:	08003395 	.word	0x08003395
 8003330:	08003311 	.word	0x08003311
 8003334:	08003311 	.word	0x08003311
 8003338:	08003311 	.word	0x08003311
 800333c:	08003311 	.word	0x08003311
 8003340:	08003395 	.word	0x08003395
 8003344:	08003311 	.word	0x08003311
 8003348:	08003311 	.word	0x08003311
 800334c:	08003311 	.word	0x08003311
 8003350:	08003311 	.word	0x08003311
 8003354:	080034a1 	.word	0x080034a1
 8003358:	080033c5 	.word	0x080033c5
 800335c:	08003483 	.word	0x08003483
 8003360:	08003311 	.word	0x08003311
 8003364:	08003311 	.word	0x08003311
 8003368:	080034c3 	.word	0x080034c3
 800336c:	08003311 	.word	0x08003311
 8003370:	080033c5 	.word	0x080033c5
 8003374:	08003311 	.word	0x08003311
 8003378:	08003311 	.word	0x08003311
 800337c:	0800348b 	.word	0x0800348b
 8003380:	680b      	ldr	r3, [r1, #0]
 8003382:	1d1a      	adds	r2, r3, #4
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	600a      	str	r2, [r1, #0]
 8003388:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800338c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003390:	2301      	movs	r3, #1
 8003392:	e0a3      	b.n	80034dc <_printf_i+0x1f4>
 8003394:	6825      	ldr	r5, [r4, #0]
 8003396:	6808      	ldr	r0, [r1, #0]
 8003398:	062e      	lsls	r6, r5, #24
 800339a:	f100 0304 	add.w	r3, r0, #4
 800339e:	d50a      	bpl.n	80033b6 <_printf_i+0xce>
 80033a0:	6805      	ldr	r5, [r0, #0]
 80033a2:	600b      	str	r3, [r1, #0]
 80033a4:	2d00      	cmp	r5, #0
 80033a6:	da03      	bge.n	80033b0 <_printf_i+0xc8>
 80033a8:	232d      	movs	r3, #45	; 0x2d
 80033aa:	426d      	negs	r5, r5
 80033ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033b0:	485e      	ldr	r0, [pc, #376]	; (800352c <_printf_i+0x244>)
 80033b2:	230a      	movs	r3, #10
 80033b4:	e019      	b.n	80033ea <_printf_i+0x102>
 80033b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80033ba:	6805      	ldr	r5, [r0, #0]
 80033bc:	600b      	str	r3, [r1, #0]
 80033be:	bf18      	it	ne
 80033c0:	b22d      	sxthne	r5, r5
 80033c2:	e7ef      	b.n	80033a4 <_printf_i+0xbc>
 80033c4:	680b      	ldr	r3, [r1, #0]
 80033c6:	6825      	ldr	r5, [r4, #0]
 80033c8:	1d18      	adds	r0, r3, #4
 80033ca:	6008      	str	r0, [r1, #0]
 80033cc:	0628      	lsls	r0, r5, #24
 80033ce:	d501      	bpl.n	80033d4 <_printf_i+0xec>
 80033d0:	681d      	ldr	r5, [r3, #0]
 80033d2:	e002      	b.n	80033da <_printf_i+0xf2>
 80033d4:	0669      	lsls	r1, r5, #25
 80033d6:	d5fb      	bpl.n	80033d0 <_printf_i+0xe8>
 80033d8:	881d      	ldrh	r5, [r3, #0]
 80033da:	4854      	ldr	r0, [pc, #336]	; (800352c <_printf_i+0x244>)
 80033dc:	2f6f      	cmp	r7, #111	; 0x6f
 80033de:	bf0c      	ite	eq
 80033e0:	2308      	moveq	r3, #8
 80033e2:	230a      	movne	r3, #10
 80033e4:	2100      	movs	r1, #0
 80033e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033ea:	6866      	ldr	r6, [r4, #4]
 80033ec:	60a6      	str	r6, [r4, #8]
 80033ee:	2e00      	cmp	r6, #0
 80033f0:	bfa2      	ittt	ge
 80033f2:	6821      	ldrge	r1, [r4, #0]
 80033f4:	f021 0104 	bicge.w	r1, r1, #4
 80033f8:	6021      	strge	r1, [r4, #0]
 80033fa:	b90d      	cbnz	r5, 8003400 <_printf_i+0x118>
 80033fc:	2e00      	cmp	r6, #0
 80033fe:	d04d      	beq.n	800349c <_printf_i+0x1b4>
 8003400:	4616      	mov	r6, r2
 8003402:	fbb5 f1f3 	udiv	r1, r5, r3
 8003406:	fb03 5711 	mls	r7, r3, r1, r5
 800340a:	5dc7      	ldrb	r7, [r0, r7]
 800340c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003410:	462f      	mov	r7, r5
 8003412:	42bb      	cmp	r3, r7
 8003414:	460d      	mov	r5, r1
 8003416:	d9f4      	bls.n	8003402 <_printf_i+0x11a>
 8003418:	2b08      	cmp	r3, #8
 800341a:	d10b      	bne.n	8003434 <_printf_i+0x14c>
 800341c:	6823      	ldr	r3, [r4, #0]
 800341e:	07df      	lsls	r7, r3, #31
 8003420:	d508      	bpl.n	8003434 <_printf_i+0x14c>
 8003422:	6923      	ldr	r3, [r4, #16]
 8003424:	6861      	ldr	r1, [r4, #4]
 8003426:	4299      	cmp	r1, r3
 8003428:	bfde      	ittt	le
 800342a:	2330      	movle	r3, #48	; 0x30
 800342c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003430:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003434:	1b92      	subs	r2, r2, r6
 8003436:	6122      	str	r2, [r4, #16]
 8003438:	f8cd a000 	str.w	sl, [sp]
 800343c:	464b      	mov	r3, r9
 800343e:	aa03      	add	r2, sp, #12
 8003440:	4621      	mov	r1, r4
 8003442:	4640      	mov	r0, r8
 8003444:	f7ff fee2 	bl	800320c <_printf_common>
 8003448:	3001      	adds	r0, #1
 800344a:	d14c      	bne.n	80034e6 <_printf_i+0x1fe>
 800344c:	f04f 30ff 	mov.w	r0, #4294967295
 8003450:	b004      	add	sp, #16
 8003452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003456:	4835      	ldr	r0, [pc, #212]	; (800352c <_printf_i+0x244>)
 8003458:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800345c:	6823      	ldr	r3, [r4, #0]
 800345e:	680e      	ldr	r6, [r1, #0]
 8003460:	061f      	lsls	r7, r3, #24
 8003462:	f856 5b04 	ldr.w	r5, [r6], #4
 8003466:	600e      	str	r6, [r1, #0]
 8003468:	d514      	bpl.n	8003494 <_printf_i+0x1ac>
 800346a:	07d9      	lsls	r1, r3, #31
 800346c:	bf44      	itt	mi
 800346e:	f043 0320 	orrmi.w	r3, r3, #32
 8003472:	6023      	strmi	r3, [r4, #0]
 8003474:	b91d      	cbnz	r5, 800347e <_printf_i+0x196>
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	f023 0320 	bic.w	r3, r3, #32
 800347c:	6023      	str	r3, [r4, #0]
 800347e:	2310      	movs	r3, #16
 8003480:	e7b0      	b.n	80033e4 <_printf_i+0xfc>
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	f043 0320 	orr.w	r3, r3, #32
 8003488:	6023      	str	r3, [r4, #0]
 800348a:	2378      	movs	r3, #120	; 0x78
 800348c:	4828      	ldr	r0, [pc, #160]	; (8003530 <_printf_i+0x248>)
 800348e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003492:	e7e3      	b.n	800345c <_printf_i+0x174>
 8003494:	065e      	lsls	r6, r3, #25
 8003496:	bf48      	it	mi
 8003498:	b2ad      	uxthmi	r5, r5
 800349a:	e7e6      	b.n	800346a <_printf_i+0x182>
 800349c:	4616      	mov	r6, r2
 800349e:	e7bb      	b.n	8003418 <_printf_i+0x130>
 80034a0:	680b      	ldr	r3, [r1, #0]
 80034a2:	6826      	ldr	r6, [r4, #0]
 80034a4:	6960      	ldr	r0, [r4, #20]
 80034a6:	1d1d      	adds	r5, r3, #4
 80034a8:	600d      	str	r5, [r1, #0]
 80034aa:	0635      	lsls	r5, r6, #24
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	d501      	bpl.n	80034b4 <_printf_i+0x1cc>
 80034b0:	6018      	str	r0, [r3, #0]
 80034b2:	e002      	b.n	80034ba <_printf_i+0x1d2>
 80034b4:	0671      	lsls	r1, r6, #25
 80034b6:	d5fb      	bpl.n	80034b0 <_printf_i+0x1c8>
 80034b8:	8018      	strh	r0, [r3, #0]
 80034ba:	2300      	movs	r3, #0
 80034bc:	6123      	str	r3, [r4, #16]
 80034be:	4616      	mov	r6, r2
 80034c0:	e7ba      	b.n	8003438 <_printf_i+0x150>
 80034c2:	680b      	ldr	r3, [r1, #0]
 80034c4:	1d1a      	adds	r2, r3, #4
 80034c6:	600a      	str	r2, [r1, #0]
 80034c8:	681e      	ldr	r6, [r3, #0]
 80034ca:	6862      	ldr	r2, [r4, #4]
 80034cc:	2100      	movs	r1, #0
 80034ce:	4630      	mov	r0, r6
 80034d0:	f7fc fe9e 	bl	8000210 <memchr>
 80034d4:	b108      	cbz	r0, 80034da <_printf_i+0x1f2>
 80034d6:	1b80      	subs	r0, r0, r6
 80034d8:	6060      	str	r0, [r4, #4]
 80034da:	6863      	ldr	r3, [r4, #4]
 80034dc:	6123      	str	r3, [r4, #16]
 80034de:	2300      	movs	r3, #0
 80034e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034e4:	e7a8      	b.n	8003438 <_printf_i+0x150>
 80034e6:	6923      	ldr	r3, [r4, #16]
 80034e8:	4632      	mov	r2, r6
 80034ea:	4649      	mov	r1, r9
 80034ec:	4640      	mov	r0, r8
 80034ee:	47d0      	blx	sl
 80034f0:	3001      	adds	r0, #1
 80034f2:	d0ab      	beq.n	800344c <_printf_i+0x164>
 80034f4:	6823      	ldr	r3, [r4, #0]
 80034f6:	079b      	lsls	r3, r3, #30
 80034f8:	d413      	bmi.n	8003522 <_printf_i+0x23a>
 80034fa:	68e0      	ldr	r0, [r4, #12]
 80034fc:	9b03      	ldr	r3, [sp, #12]
 80034fe:	4298      	cmp	r0, r3
 8003500:	bfb8      	it	lt
 8003502:	4618      	movlt	r0, r3
 8003504:	e7a4      	b.n	8003450 <_printf_i+0x168>
 8003506:	2301      	movs	r3, #1
 8003508:	4632      	mov	r2, r6
 800350a:	4649      	mov	r1, r9
 800350c:	4640      	mov	r0, r8
 800350e:	47d0      	blx	sl
 8003510:	3001      	adds	r0, #1
 8003512:	d09b      	beq.n	800344c <_printf_i+0x164>
 8003514:	3501      	adds	r5, #1
 8003516:	68e3      	ldr	r3, [r4, #12]
 8003518:	9903      	ldr	r1, [sp, #12]
 800351a:	1a5b      	subs	r3, r3, r1
 800351c:	42ab      	cmp	r3, r5
 800351e:	dcf2      	bgt.n	8003506 <_printf_i+0x21e>
 8003520:	e7eb      	b.n	80034fa <_printf_i+0x212>
 8003522:	2500      	movs	r5, #0
 8003524:	f104 0619 	add.w	r6, r4, #25
 8003528:	e7f5      	b.n	8003516 <_printf_i+0x22e>
 800352a:	bf00      	nop
 800352c:	080037f9 	.word	0x080037f9
 8003530:	0800380a 	.word	0x0800380a

08003534 <memmove>:
 8003534:	4288      	cmp	r0, r1
 8003536:	b510      	push	{r4, lr}
 8003538:	eb01 0402 	add.w	r4, r1, r2
 800353c:	d902      	bls.n	8003544 <memmove+0x10>
 800353e:	4284      	cmp	r4, r0
 8003540:	4623      	mov	r3, r4
 8003542:	d807      	bhi.n	8003554 <memmove+0x20>
 8003544:	1e43      	subs	r3, r0, #1
 8003546:	42a1      	cmp	r1, r4
 8003548:	d008      	beq.n	800355c <memmove+0x28>
 800354a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800354e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003552:	e7f8      	b.n	8003546 <memmove+0x12>
 8003554:	4402      	add	r2, r0
 8003556:	4601      	mov	r1, r0
 8003558:	428a      	cmp	r2, r1
 800355a:	d100      	bne.n	800355e <memmove+0x2a>
 800355c:	bd10      	pop	{r4, pc}
 800355e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003562:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003566:	e7f7      	b.n	8003558 <memmove+0x24>

08003568 <_free_r>:
 8003568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800356a:	2900      	cmp	r1, #0
 800356c:	d048      	beq.n	8003600 <_free_r+0x98>
 800356e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003572:	9001      	str	r0, [sp, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	f1a1 0404 	sub.w	r4, r1, #4
 800357a:	bfb8      	it	lt
 800357c:	18e4      	addlt	r4, r4, r3
 800357e:	f000 f8d3 	bl	8003728 <__malloc_lock>
 8003582:	4a20      	ldr	r2, [pc, #128]	; (8003604 <_free_r+0x9c>)
 8003584:	9801      	ldr	r0, [sp, #4]
 8003586:	6813      	ldr	r3, [r2, #0]
 8003588:	4615      	mov	r5, r2
 800358a:	b933      	cbnz	r3, 800359a <_free_r+0x32>
 800358c:	6063      	str	r3, [r4, #4]
 800358e:	6014      	str	r4, [r2, #0]
 8003590:	b003      	add	sp, #12
 8003592:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003596:	f000 b8cd 	b.w	8003734 <__malloc_unlock>
 800359a:	42a3      	cmp	r3, r4
 800359c:	d90b      	bls.n	80035b6 <_free_r+0x4e>
 800359e:	6821      	ldr	r1, [r4, #0]
 80035a0:	1862      	adds	r2, r4, r1
 80035a2:	4293      	cmp	r3, r2
 80035a4:	bf04      	itt	eq
 80035a6:	681a      	ldreq	r2, [r3, #0]
 80035a8:	685b      	ldreq	r3, [r3, #4]
 80035aa:	6063      	str	r3, [r4, #4]
 80035ac:	bf04      	itt	eq
 80035ae:	1852      	addeq	r2, r2, r1
 80035b0:	6022      	streq	r2, [r4, #0]
 80035b2:	602c      	str	r4, [r5, #0]
 80035b4:	e7ec      	b.n	8003590 <_free_r+0x28>
 80035b6:	461a      	mov	r2, r3
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	b10b      	cbz	r3, 80035c0 <_free_r+0x58>
 80035bc:	42a3      	cmp	r3, r4
 80035be:	d9fa      	bls.n	80035b6 <_free_r+0x4e>
 80035c0:	6811      	ldr	r1, [r2, #0]
 80035c2:	1855      	adds	r5, r2, r1
 80035c4:	42a5      	cmp	r5, r4
 80035c6:	d10b      	bne.n	80035e0 <_free_r+0x78>
 80035c8:	6824      	ldr	r4, [r4, #0]
 80035ca:	4421      	add	r1, r4
 80035cc:	1854      	adds	r4, r2, r1
 80035ce:	42a3      	cmp	r3, r4
 80035d0:	6011      	str	r1, [r2, #0]
 80035d2:	d1dd      	bne.n	8003590 <_free_r+0x28>
 80035d4:	681c      	ldr	r4, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	6053      	str	r3, [r2, #4]
 80035da:	4421      	add	r1, r4
 80035dc:	6011      	str	r1, [r2, #0]
 80035de:	e7d7      	b.n	8003590 <_free_r+0x28>
 80035e0:	d902      	bls.n	80035e8 <_free_r+0x80>
 80035e2:	230c      	movs	r3, #12
 80035e4:	6003      	str	r3, [r0, #0]
 80035e6:	e7d3      	b.n	8003590 <_free_r+0x28>
 80035e8:	6825      	ldr	r5, [r4, #0]
 80035ea:	1961      	adds	r1, r4, r5
 80035ec:	428b      	cmp	r3, r1
 80035ee:	bf04      	itt	eq
 80035f0:	6819      	ldreq	r1, [r3, #0]
 80035f2:	685b      	ldreq	r3, [r3, #4]
 80035f4:	6063      	str	r3, [r4, #4]
 80035f6:	bf04      	itt	eq
 80035f8:	1949      	addeq	r1, r1, r5
 80035fa:	6021      	streq	r1, [r4, #0]
 80035fc:	6054      	str	r4, [r2, #4]
 80035fe:	e7c7      	b.n	8003590 <_free_r+0x28>
 8003600:	b003      	add	sp, #12
 8003602:	bd30      	pop	{r4, r5, pc}
 8003604:	20000094 	.word	0x20000094

08003608 <_malloc_r>:
 8003608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360a:	1ccd      	adds	r5, r1, #3
 800360c:	f025 0503 	bic.w	r5, r5, #3
 8003610:	3508      	adds	r5, #8
 8003612:	2d0c      	cmp	r5, #12
 8003614:	bf38      	it	cc
 8003616:	250c      	movcc	r5, #12
 8003618:	2d00      	cmp	r5, #0
 800361a:	4606      	mov	r6, r0
 800361c:	db01      	blt.n	8003622 <_malloc_r+0x1a>
 800361e:	42a9      	cmp	r1, r5
 8003620:	d903      	bls.n	800362a <_malloc_r+0x22>
 8003622:	230c      	movs	r3, #12
 8003624:	6033      	str	r3, [r6, #0]
 8003626:	2000      	movs	r0, #0
 8003628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800362a:	f000 f87d 	bl	8003728 <__malloc_lock>
 800362e:	4921      	ldr	r1, [pc, #132]	; (80036b4 <_malloc_r+0xac>)
 8003630:	680a      	ldr	r2, [r1, #0]
 8003632:	4614      	mov	r4, r2
 8003634:	b99c      	cbnz	r4, 800365e <_malloc_r+0x56>
 8003636:	4f20      	ldr	r7, [pc, #128]	; (80036b8 <_malloc_r+0xb0>)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	b923      	cbnz	r3, 8003646 <_malloc_r+0x3e>
 800363c:	4621      	mov	r1, r4
 800363e:	4630      	mov	r0, r6
 8003640:	f000 f862 	bl	8003708 <_sbrk_r>
 8003644:	6038      	str	r0, [r7, #0]
 8003646:	4629      	mov	r1, r5
 8003648:	4630      	mov	r0, r6
 800364a:	f000 f85d 	bl	8003708 <_sbrk_r>
 800364e:	1c43      	adds	r3, r0, #1
 8003650:	d123      	bne.n	800369a <_malloc_r+0x92>
 8003652:	230c      	movs	r3, #12
 8003654:	6033      	str	r3, [r6, #0]
 8003656:	4630      	mov	r0, r6
 8003658:	f000 f86c 	bl	8003734 <__malloc_unlock>
 800365c:	e7e3      	b.n	8003626 <_malloc_r+0x1e>
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	1b5b      	subs	r3, r3, r5
 8003662:	d417      	bmi.n	8003694 <_malloc_r+0x8c>
 8003664:	2b0b      	cmp	r3, #11
 8003666:	d903      	bls.n	8003670 <_malloc_r+0x68>
 8003668:	6023      	str	r3, [r4, #0]
 800366a:	441c      	add	r4, r3
 800366c:	6025      	str	r5, [r4, #0]
 800366e:	e004      	b.n	800367a <_malloc_r+0x72>
 8003670:	6863      	ldr	r3, [r4, #4]
 8003672:	42a2      	cmp	r2, r4
 8003674:	bf0c      	ite	eq
 8003676:	600b      	streq	r3, [r1, #0]
 8003678:	6053      	strne	r3, [r2, #4]
 800367a:	4630      	mov	r0, r6
 800367c:	f000 f85a 	bl	8003734 <__malloc_unlock>
 8003680:	f104 000b 	add.w	r0, r4, #11
 8003684:	1d23      	adds	r3, r4, #4
 8003686:	f020 0007 	bic.w	r0, r0, #7
 800368a:	1ac2      	subs	r2, r0, r3
 800368c:	d0cc      	beq.n	8003628 <_malloc_r+0x20>
 800368e:	1a1b      	subs	r3, r3, r0
 8003690:	50a3      	str	r3, [r4, r2]
 8003692:	e7c9      	b.n	8003628 <_malloc_r+0x20>
 8003694:	4622      	mov	r2, r4
 8003696:	6864      	ldr	r4, [r4, #4]
 8003698:	e7cc      	b.n	8003634 <_malloc_r+0x2c>
 800369a:	1cc4      	adds	r4, r0, #3
 800369c:	f024 0403 	bic.w	r4, r4, #3
 80036a0:	42a0      	cmp	r0, r4
 80036a2:	d0e3      	beq.n	800366c <_malloc_r+0x64>
 80036a4:	1a21      	subs	r1, r4, r0
 80036a6:	4630      	mov	r0, r6
 80036a8:	f000 f82e 	bl	8003708 <_sbrk_r>
 80036ac:	3001      	adds	r0, #1
 80036ae:	d1dd      	bne.n	800366c <_malloc_r+0x64>
 80036b0:	e7cf      	b.n	8003652 <_malloc_r+0x4a>
 80036b2:	bf00      	nop
 80036b4:	20000094 	.word	0x20000094
 80036b8:	20000098 	.word	0x20000098

080036bc <_realloc_r>:
 80036bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036be:	4607      	mov	r7, r0
 80036c0:	4614      	mov	r4, r2
 80036c2:	460e      	mov	r6, r1
 80036c4:	b921      	cbnz	r1, 80036d0 <_realloc_r+0x14>
 80036c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80036ca:	4611      	mov	r1, r2
 80036cc:	f7ff bf9c 	b.w	8003608 <_malloc_r>
 80036d0:	b922      	cbnz	r2, 80036dc <_realloc_r+0x20>
 80036d2:	f7ff ff49 	bl	8003568 <_free_r>
 80036d6:	4625      	mov	r5, r4
 80036d8:	4628      	mov	r0, r5
 80036da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036dc:	f000 f830 	bl	8003740 <_malloc_usable_size_r>
 80036e0:	42a0      	cmp	r0, r4
 80036e2:	d20f      	bcs.n	8003704 <_realloc_r+0x48>
 80036e4:	4621      	mov	r1, r4
 80036e6:	4638      	mov	r0, r7
 80036e8:	f7ff ff8e 	bl	8003608 <_malloc_r>
 80036ec:	4605      	mov	r5, r0
 80036ee:	2800      	cmp	r0, #0
 80036f0:	d0f2      	beq.n	80036d8 <_realloc_r+0x1c>
 80036f2:	4631      	mov	r1, r6
 80036f4:	4622      	mov	r2, r4
 80036f6:	f7ff fbc7 	bl	8002e88 <memcpy>
 80036fa:	4631      	mov	r1, r6
 80036fc:	4638      	mov	r0, r7
 80036fe:	f7ff ff33 	bl	8003568 <_free_r>
 8003702:	e7e9      	b.n	80036d8 <_realloc_r+0x1c>
 8003704:	4635      	mov	r5, r6
 8003706:	e7e7      	b.n	80036d8 <_realloc_r+0x1c>

08003708 <_sbrk_r>:
 8003708:	b538      	push	{r3, r4, r5, lr}
 800370a:	4d06      	ldr	r5, [pc, #24]	; (8003724 <_sbrk_r+0x1c>)
 800370c:	2300      	movs	r3, #0
 800370e:	4604      	mov	r4, r0
 8003710:	4608      	mov	r0, r1
 8003712:	602b      	str	r3, [r5, #0]
 8003714:	f7fd fba4 	bl	8000e60 <_sbrk>
 8003718:	1c43      	adds	r3, r0, #1
 800371a:	d102      	bne.n	8003722 <_sbrk_r+0x1a>
 800371c:	682b      	ldr	r3, [r5, #0]
 800371e:	b103      	cbz	r3, 8003722 <_sbrk_r+0x1a>
 8003720:	6023      	str	r3, [r4, #0]
 8003722:	bd38      	pop	{r3, r4, r5, pc}
 8003724:	20000dc4 	.word	0x20000dc4

08003728 <__malloc_lock>:
 8003728:	4801      	ldr	r0, [pc, #4]	; (8003730 <__malloc_lock+0x8>)
 800372a:	f000 b811 	b.w	8003750 <__retarget_lock_acquire_recursive>
 800372e:	bf00      	nop
 8003730:	20000dcc 	.word	0x20000dcc

08003734 <__malloc_unlock>:
 8003734:	4801      	ldr	r0, [pc, #4]	; (800373c <__malloc_unlock+0x8>)
 8003736:	f000 b80c 	b.w	8003752 <__retarget_lock_release_recursive>
 800373a:	bf00      	nop
 800373c:	20000dcc 	.word	0x20000dcc

08003740 <_malloc_usable_size_r>:
 8003740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003744:	1f18      	subs	r0, r3, #4
 8003746:	2b00      	cmp	r3, #0
 8003748:	bfbc      	itt	lt
 800374a:	580b      	ldrlt	r3, [r1, r0]
 800374c:	18c0      	addlt	r0, r0, r3
 800374e:	4770      	bx	lr

08003750 <__retarget_lock_acquire_recursive>:
 8003750:	4770      	bx	lr

08003752 <__retarget_lock_release_recursive>:
 8003752:	4770      	bx	lr

08003754 <_init>:
 8003754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003756:	bf00      	nop
 8003758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375a:	bc08      	pop	{r3}
 800375c:	469e      	mov	lr, r3
 800375e:	4770      	bx	lr

08003760 <_fini>:
 8003760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003762:	bf00      	nop
 8003764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003766:	bc08      	pop	{r3}
 8003768:	469e      	mov	lr, r3
 800376a:	4770      	bx	lr
